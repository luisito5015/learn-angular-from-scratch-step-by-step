{"ast":null,"code":"import _classCallCheck from \"/Users/luiscotto/Documents/Projects/CS-470/practice/lafs-web/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/luiscotto/Documents/Projects/CS-470/practice/lafs-web/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as i0 from \"@angular/core\";\n/**\n* @author Jonathan Casarrubias <twitter:@johncasarrubias> <github:@mean-expert-official>\n* @module StorageBrowser\n* @license MIT\n* @description\n* This module handle localStorage, it will be provided using DI Swapping according the\n* SDK Socket Driver Available currently supporting Angular 2 for web and NativeScript 2.\n**/\n\nexport var StorageBrowser = /*#__PURE__*/(function () {\n  var StorageBrowser = /*#__PURE__*/function () {\n    function StorageBrowser() {\n      _classCallCheck(this, StorageBrowser);\n    }\n\n    _createClass(StorageBrowser, [{\n      key: \"get\",\n      value:\n      /**\n       * @method get\n       * @param {string} key Storage key name\n       * @return {any}\n       * @description\n       * The getter will return any type of data persisted in localStorage.\n       **/\n      function get(key) {\n        var data = localStorage.getItem(key);\n        return this.parse(data);\n      }\n      /**\n       * @method set\n       * @param {string} key Storage key name\n       * @param {any} value Any value\n       * @return {void}\n       * @description\n       * The setter will return any type of data persisted in localStorage.\n       **/\n\n    }, {\n      key: \"set\",\n      value: function set(key, value, expires) {\n        localStorage.setItem(key, typeof value === 'object' ? JSON.stringify(value) : value);\n      }\n      /**\n       * @method remove\n       * @param {string} key Storage key name\n       * @return {void}\n       * @description\n       * This method will remove a localStorage item from the client.\n       **/\n\n    }, {\n      key: \"remove\",\n      value: function remove(key) {\n        if (localStorage[key]) {\n          localStorage.removeItem(key);\n        } else {\n          console.log('Trying to remove unexisting key: ', key);\n        }\n      }\n      /**\n       * @method parse\n       * @param {any} value Input data expected to be JSON\n       * @return {void}\n       * @description\n       * This method will parse the string as JSON if possible, otherwise will\n       * return the value itself.\n       **/\n\n    }, {\n      key: \"parse\",\n      value: function parse(value) {\n        try {\n          return JSON.parse(value);\n        } catch (e) {\n          return value;\n        }\n      }\n    }]);\n\n    return StorageBrowser;\n  }();\n\n  StorageBrowser.ɵfac = function StorageBrowser_Factory(t) {\n    return new (t || StorageBrowser)();\n  };\n\n  StorageBrowser.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: StorageBrowser,\n    factory: StorageBrowser.ɵfac\n  });\n  return StorageBrowser;\n})();","map":null,"metadata":{},"sourceType":"module"}