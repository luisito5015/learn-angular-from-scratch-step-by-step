{"ast":null,"code":"import _inherits from \"/Users/luiscotto/Documents/Projects/CS-470/practice/lafs-web/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/luiscotto/Documents/Projects/CS-470/practice/lafs-web/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _createClass from \"/Users/luiscotto/Documents/Projects/CS-470/practice/lafs-web/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/luiscotto/Documents/Projects/CS-470/practice/lafs-web/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AriaDescriber, A11yModule } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport { Directive, ElementRef, Inject, Input, NgZone, Optional, Renderer2, NgModule } from '@angular/core';\nimport { mixinDisabled, MatCommonModule } from '@angular/material/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nvar nextId = 0; // Boilerplate for applying mixins to MatBadge.\n\n/**\n * \\@docs-private\n */\n\nvar MatBadgeBase = /*#__PURE__*/_createClass(function MatBadgeBase() {\n  _classCallCheck(this, MatBadgeBase);\n});\n/** @type {?} */\n\n\nvar _MatBadgeMixinBase = /*#__PURE__*/mixinDisabled(MatBadgeBase);\n/**\n * Directive to display a text badge.\n */\n\n\nvar MatBadge = /*#__PURE__*/(function () {\n  var MatBadge = /*#__PURE__*/function (_MatBadgeMixinBase2) {\n    _inherits(MatBadge, _MatBadgeMixinBase2);\n\n    var _super = _createSuper(MatBadge);\n\n    /**\n     * @param {?} _document\n     * @param {?} _ngZone\n     * @param {?} _elementRef\n     * @param {?} _ariaDescriber\n     * @param {?=} _renderer\n     */\n    function MatBadge(_document, _ngZone, _elementRef, _ariaDescriber, _renderer) {\n      var _this;\n\n      _classCallCheck(this, MatBadge);\n\n      _this = _super.call(this);\n      _this._document = _document;\n      _this._ngZone = _ngZone;\n      _this._elementRef = _elementRef;\n      _this._ariaDescriber = _ariaDescriber;\n      _this._renderer = _renderer;\n      /**\n       * Whether the badge has any content.\n       */\n\n      _this._hasContent = false;\n      _this._color = 'primary';\n      _this._overlap = true;\n      /**\n       * Position the badge should reside.\n       * Accepts any combination of 'above'|'below' and 'before'|'after'\n       */\n\n      _this.position = 'above after';\n      /**\n       * Size of the badge. Can be 'small', 'medium', or 'large'.\n       */\n\n      _this.size = 'medium';\n      /**\n       * Unique id for the badge\n       */\n\n      _this._id = nextId++;\n      return _this;\n    }\n    /**\n     * The color of the badge. Can be `primary`, `accent`, or `warn`.\n     * @return {?}\n     */\n\n\n    _createClass(MatBadge, [{\n      key: \"color\",\n      get: function get() {\n        return this._color;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._setColor(value);\n\n        this._color = value;\n      }\n      /**\n       * Whether the badge should overlap its contents or not\n       * @return {?}\n       */\n\n    }, {\n      key: \"overlap\",\n      get: function get() {\n        return this._overlap;\n      }\n      /**\n       * @param {?} val\n       * @return {?}\n       */\n      ,\n      set: function set(val) {\n        this._overlap = coerceBooleanProperty(val);\n      }\n      /**\n       * The content for the badge\n       * @return {?}\n       */\n\n    }, {\n      key: \"content\",\n      get: function get() {\n        return this._content;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        this._content = value;\n        this._hasContent = value != null && \"\".concat(value).trim().length > 0;\n\n        this._updateTextContent();\n      }\n      /**\n       * Message used to describe the decorated element via aria-describedby\n       * @return {?}\n       */\n\n    }, {\n      key: \"description\",\n      get: function get() {\n        return this._description;\n      }\n      /**\n       * @param {?} newDescription\n       * @return {?}\n       */\n      ,\n      set: function set(newDescription) {\n        if (newDescription !== this._description) {\n          /** @type {?} */\n          var badgeElement = this._badgeElement;\n\n          this._updateHostAriaDescription(newDescription, this._description);\n\n          this._description = newDescription;\n\n          if (badgeElement) {\n            newDescription ? badgeElement.setAttribute('aria-label', newDescription) : badgeElement.removeAttribute('aria-label');\n          }\n        }\n      }\n      /**\n       * Whether the badge is hidden.\n       * @return {?}\n       */\n\n    }, {\n      key: \"hidden\",\n      get: function get() {\n        return this._hidden;\n      }\n      /**\n       * @param {?} val\n       * @return {?}\n       */\n      ,\n      set: function set(val) {\n        this._hidden = coerceBooleanProperty(val);\n      }\n      /**\n       * Whether the badge is above the host or not\n       * @return {?}\n       */\n\n    }, {\n      key: \"isAbove\",\n      value: function isAbove() {\n        return this.position.indexOf('below') === -1;\n      }\n      /**\n       * Whether the badge is after the host or not\n       * @return {?}\n       */\n\n    }, {\n      key: \"isAfter\",\n      value: function isAfter() {\n        return this.position.indexOf('before') === -1;\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        /** @type {?} */\n        var badgeElement = this._badgeElement;\n\n        if (badgeElement) {\n          if (this.description) {\n            this._ariaDescriber.removeDescription(badgeElement, this.description);\n          } // When creating a badge through the Renderer, Angular will keep it in an index.\n          // We have to destroy it ourselves, otherwise it'll be retained in memory.\n          // @breaking-change 8.0.0 remove _renderer from null.\n\n\n          if (this._renderer && this._renderer.destroyNode) {\n            this._renderer.destroyNode(badgeElement);\n          }\n        }\n      }\n      /**\n       * Injects a span element into the DOM with the content.\n       * @private\n       * @return {?}\n       */\n\n    }, {\n      key: \"_updateTextContent\",\n      value: function _updateTextContent() {\n        if (!this._badgeElement) {\n          this._badgeElement = this._createBadgeElement();\n        } else {\n          this._badgeElement.textContent = this.content;\n        }\n\n        return this._badgeElement;\n      }\n      /**\n       * Creates the badge element\n       * @private\n       * @return {?}\n       */\n\n    }, {\n      key: \"_createBadgeElement\",\n      value: function _createBadgeElement() {\n        // @breaking-change 8.0.0 Remove null check for _renderer\n\n        /** @type {?} */\n        var rootNode = this._renderer || this._document;\n        /** @type {?} */\n\n        var badgeElement = rootNode.createElement('span');\n        /** @type {?} */\n\n        var activeClass = 'mat-badge-active';\n        /** @type {?} */\n\n        var contentClass = 'mat-badge-content'; // Clear any existing badges which may have persisted from a server-side render.\n\n        this._clearExistingBadges(contentClass);\n\n        badgeElement.setAttribute('id', \"mat-badge-content-\".concat(this._id));\n        badgeElement.classList.add(contentClass);\n        badgeElement.textContent = this.content;\n\n        if (this.description) {\n          badgeElement.setAttribute('aria-label', this.description);\n        }\n\n        this._elementRef.nativeElement.appendChild(badgeElement); // animate in after insertion\n\n\n        if (typeof requestAnimationFrame === 'function') {\n          this._ngZone.runOutsideAngular(function () {\n            requestAnimationFrame(function () {\n              badgeElement.classList.add(activeClass);\n            });\n          });\n        } else {\n          badgeElement.classList.add(activeClass);\n        }\n\n        return badgeElement;\n      }\n      /**\n       * Sets the aria-label property on the element\n       * @private\n       * @param {?} newDescription\n       * @param {?} oldDescription\n       * @return {?}\n       */\n\n    }, {\n      key: \"_updateHostAriaDescription\",\n      value: function _updateHostAriaDescription(newDescription, oldDescription) {\n        // ensure content available before setting label\n\n        /** @type {?} */\n        var content = this._updateTextContent();\n\n        if (oldDescription) {\n          this._ariaDescriber.removeDescription(content, oldDescription);\n        }\n\n        if (newDescription) {\n          this._ariaDescriber.describe(content, newDescription);\n        }\n      }\n      /**\n       * Adds css theme class given the color to the component host\n       * @private\n       * @param {?} colorPalette\n       * @return {?}\n       */\n\n    }, {\n      key: \"_setColor\",\n      value: function _setColor(colorPalette) {\n        if (colorPalette !== this._color) {\n          if (this._color) {\n            this._elementRef.nativeElement.classList.remove(\"mat-badge-\".concat(this._color));\n          }\n\n          if (colorPalette) {\n            this._elementRef.nativeElement.classList.add(\"mat-badge-\".concat(colorPalette));\n          }\n        }\n      }\n      /**\n       * Clears any existing badges that might be left over from server-side rendering.\n       * @private\n       * @param {?} cssClass\n       * @return {?}\n       */\n\n    }, {\n      key: \"_clearExistingBadges\",\n      value: function _clearExistingBadges(cssClass) {\n        /** @type {?} */\n        var element = this._elementRef.nativeElement;\n        /** @type {?} */\n\n        var childCount = element.children.length; // Use a reverse while, because we'll be removing elements from the list as we're iterating.\n\n        while (childCount--) {\n          /** @type {?} */\n          var currentChild = element.children[childCount];\n\n          if (currentChild.classList.contains(cssClass)) {\n            element.removeChild(currentChild);\n          }\n        }\n      }\n    }]);\n\n    return MatBadge;\n  }(_MatBadgeMixinBase);\n\n  MatBadge.ɵfac = function MatBadge_Factory(t) {\n    return new (t || MatBadge)(ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2));\n  };\n\n  MatBadge.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatBadge,\n    selectors: [[\"\", \"matBadge\", \"\"]],\n    hostAttrs: [1, \"mat-badge\"],\n    hostVars: 20,\n    hostBindings: function MatBadge_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-badge-overlap\", ctx.overlap)(\"mat-badge-above\", ctx.isAbove())(\"mat-badge-below\", !ctx.isAbove())(\"mat-badge-before\", !ctx.isAfter())(\"mat-badge-after\", ctx.isAfter())(\"mat-badge-small\", ctx.size === \"small\")(\"mat-badge-medium\", ctx.size === \"medium\")(\"mat-badge-large\", ctx.size === \"large\")(\"mat-badge-hidden\", ctx.hidden || !ctx._hasContent)(\"mat-badge-disabled\", ctx.disabled);\n      }\n    },\n    inputs: {\n      disabled: [\"matBadgeDisabled\", \"disabled\"],\n      position: [\"matBadgePosition\", \"position\"],\n      size: [\"matBadgeSize\", \"size\"],\n      color: [\"matBadgeColor\", \"color\"],\n      overlap: [\"matBadgeOverlap\", \"overlap\"],\n      content: [\"matBadge\", \"content\"],\n      description: [\"matBadgeDescription\", \"description\"],\n      hidden: [\"matBadgeHidden\", \"hidden\"]\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  /** @nocollapse */\n\n  return MatBadge;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar MatBadgeModule = /*#__PURE__*/(function () {\n  var MatBadgeModule = /*#__PURE__*/_createClass(function MatBadgeModule() {\n    _classCallCheck(this, MatBadgeModule);\n  });\n\n  MatBadgeModule.ɵfac = function MatBadgeModule_Factory(t) {\n    return new (t || MatBadgeModule)();\n  };\n\n  MatBadgeModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatBadgeModule\n  });\n  MatBadgeModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[A11yModule, MatCommonModule]]\n  });\n  return MatBadgeModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatBadgeModule, {\n    declarations: function declarations() {\n      return [MatBadge];\n    },\n    imports: function imports() {\n      return [A11yModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatBadge];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { MatBadgeModule, MatBadgeBase, _MatBadgeMixinBase, MatBadge }; //# sourceMappingURL=badge.js.map","map":null,"metadata":{},"sourceType":"module"}