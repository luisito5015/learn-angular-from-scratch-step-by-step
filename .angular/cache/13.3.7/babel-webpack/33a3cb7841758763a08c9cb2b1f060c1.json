{"ast":null,"code":"import _inherits from \"/Users/luiscotto/Documents/Projects/CS-470/practice/lafs-web/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/luiscotto/Documents/Projects/CS-470/practice/lafs-web/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classCallCheck from \"/Users/luiscotto/Documents/Projects/CS-470/practice/lafs-web/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/luiscotto/Documents/Projects/CS-470/practice/lafs-web/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/* tslint:disable */\n\n/**\n * @module Storage\n * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\n * @license MIT\n * @description\n * The InternalStorage class is used for dependency injection swapping.\n * It will be provided using factory method from different sources.\n **/\nexport var BaseStorage = /*#__PURE__*/function () {\n  function BaseStorage() {\n    _classCallCheck(this, BaseStorage);\n  }\n\n  _createClass(BaseStorage, [{\n    key: \"get\",\n    value:\n    /**\n     * @method get\n     * @param {string} key Storage key name\n     * @return {any}\n     * @description\n     * The getter will return any type of data persisted in storage.\n     **/\n    function get(key) {}\n    /**\n     * @method set\n     * @param {string} key Storage key name\n     * @param {any} value Any value\n     * @return {void}\n     * @description\n     * The setter will return any type of data persisted in localStorage.\n     **/\n\n  }, {\n    key: \"set\",\n    value: function set(key, value, expires) {}\n    /**\n     * @method remove\n     * @param {string} key Storage key name\n     * @return {void}\n     * @description\n     * This method will remove a localStorage item from the client.\n     **/\n\n  }, {\n    key: \"remove\",\n    value: function remove(key) {}\n  }]);\n\n  return BaseStorage;\n}();\n/**\n * @module InternalStorage\n * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\n * @license MIT\n * @description\n * The InternalStorage class is used for dependency injection swapping.\n * It will be provided using factory method from different sources.\n * This is mainly required because Angular Universal integration.\n * It does inject a CookieStorage instead of LocalStorage.\n **/\n\nexport var InternalStorage = /*#__PURE__*/function (_BaseStorage) {\n  _inherits(InternalStorage, _BaseStorage);\n\n  var _super = _createSuper(InternalStorage);\n\n  function InternalStorage() {\n    _classCallCheck(this, InternalStorage);\n\n    return _super.apply(this, arguments);\n  }\n\n  return _createClass(InternalStorage);\n}(BaseStorage);\n/**\n * @module SDKStorage\n * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\n * @license MIT\n * @description\n * The SDKStorage class is used for dependency injection swapping.\n * It will be provided using factory method according the right environment.\n * This is created for public usage, to allow persisting custom data\n * Into the local storage API.\n **/\n\nexport var SDKStorage = /*#__PURE__*/function (_BaseStorage2) {\n  _inherits(SDKStorage, _BaseStorage2);\n\n  var _super2 = _createSuper(SDKStorage);\n\n  function SDKStorage() {\n    _classCallCheck(this, SDKStorage);\n\n    return _super2.apply(this, arguments);\n  }\n\n  return _createClass(SDKStorage);\n}(BaseStorage);","map":null,"metadata":{},"sourceType":"module"}