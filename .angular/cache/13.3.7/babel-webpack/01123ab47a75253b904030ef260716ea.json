{"ast":null,"code":"import _classCallCheck from \"/Users/luiscotto/Documents/Projects/CS-470/practice/lafs-web/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/luiscotto/Documents/Projects/CS-470/practice/lafs-web/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/luiscotto/Documents/Projects/CS-470/practice/lafs-web/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/luiscotto/Documents/Projects/CS-470/practice/lafs-web/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Http } from '@angular/http';\nimport { SDKModels } from './SDKModels';\nimport { BaseLoopBackApi } from '../core/base.service';\nimport { LoopBackConfig } from '../../lb.config';\nimport { LoopBackAuth } from '../core/auth.service';\nimport { LoopBackFilter, AccessToken } from '../../models/BaseModels';\nimport { JSONSearchParams } from '../core/search.params';\nimport { ErrorHandler } from '../core/error.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/http\";\nimport * as i2 from \"./SDKModels\";\nimport * as i3 from \"../core/auth.service\";\nimport * as i4 from \"../core/search.params\";\nimport * as i5 from \"../core/error.service\";\n/**\n * Api services for the `User` model.\n */\n\nexport var UserApi = /*#__PURE__*/(function () {\n  var UserApi = /*#__PURE__*/function (_BaseLoopBackApi) {\n    _inherits(UserApi, _BaseLoopBackApi);\n\n    var _super = _createSuper(UserApi);\n\n    function UserApi(http, models, auth, searchParams, errorHandler) {\n      var _this;\n\n      _classCallCheck(this, UserApi);\n\n      _this = _super.call(this, http, models, auth, searchParams, errorHandler);\n      _this.http = http;\n      _this.models = models;\n      _this.auth = auth;\n      _this.searchParams = searchParams;\n      _this.errorHandler = errorHandler;\n      return _this;\n    }\n    /**\n     * Find a related item by id for accessTokens.\n     *\n     * @param {any} id User id\n     *\n     * @param {any} fk Foreign key for accessTokens\n     *\n     * @returns {object} An empty reference that will be\n     *   populated with the actual data once the response is returned\n     *   from the server.\n     *\n     * <em>\n     * (The remote method definition does not provide any description.\n     * This usually means the response is a `User` object.)\n     * </em>\n     */\n\n\n    _createClass(UserApi, [{\n      key: \"findByIdAccessTokens\",\n      value: function findByIdAccessTokens(id, fk, customHeaders) {\n        var _method = \"GET\";\n\n        var _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users/:id/accessTokens/:fk\";\n\n        var _routeParams = {\n          id: id,\n          fk: fk\n        };\n        var _postBody = {};\n        var _urlParams = {};\n        var result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n        return result;\n      }\n      /**\n       * Delete a related item by id for accessTokens.\n       *\n       * @param {any} id User id\n       *\n       * @param {any} fk Foreign key for accessTokens\n       *\n       * @returns {object} An empty reference that will be\n       *   populated with the actual data once the response is returned\n       *   from the server.\n       *\n       * This method returns no data.\n       */\n\n    }, {\n      key: \"destroyByIdAccessTokens\",\n      value: function destroyByIdAccessTokens(id, fk, customHeaders) {\n        var _method = \"DELETE\";\n\n        var _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users/:id/accessTokens/:fk\";\n\n        var _routeParams = {\n          id: id,\n          fk: fk\n        };\n        var _postBody = {};\n        var _urlParams = {};\n        var result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n        return result;\n      }\n      /**\n       * Update a related item by id for accessTokens.\n       *\n       * @param {any} id User id\n       *\n       * @param {any} fk Foreign key for accessTokens\n       *\n       * @param {object} data Request data.\n       *\n       * This method expects a subset of model properties as request parameters.\n       *\n       * @returns {object} An empty reference that will be\n       *   populated with the actual data once the response is returned\n       *   from the server.\n       *\n       * <em>\n       * (The remote method definition does not provide any description.\n       * This usually means the response is a `User` object.)\n       * </em>\n       */\n\n    }, {\n      key: \"updateByIdAccessTokens\",\n      value: function updateByIdAccessTokens(id, fk) {\n        var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        var customHeaders = arguments.length > 3 ? arguments[3] : undefined;\n        var _method = \"PUT\";\n\n        var _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users/:id/accessTokens/:fk\";\n\n        var _routeParams = {\n          id: id,\n          fk: fk\n        };\n        var _postBody = {\n          data: data\n        };\n        var _urlParams = {};\n        var result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n        return result;\n      }\n      /**\n       * Queries accessTokens of User.\n       *\n       * @param {any} id User id\n       *\n       * @param {object} filter\n       *\n       * @returns {object[]} An empty reference that will be\n       *   populated with the actual data once the response is returned\n       *   from the server.\n       *\n       * <em>\n       * (The remote method definition does not provide any description.\n       * This usually means the response is a `User` object.)\n       * </em>\n       */\n\n    }, {\n      key: \"getAccessTokens\",\n      value: function getAccessTokens(id) {\n        var filter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var customHeaders = arguments.length > 2 ? arguments[2] : undefined;\n        var _method = \"GET\";\n\n        var _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users/:id/accessTokens\";\n\n        var _routeParams = {\n          id: id\n        };\n        var _postBody = {};\n        var _urlParams = {};\n        if (typeof filter !== 'undefined' && filter !== null) _urlParams.filter = filter;\n        var result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n        return result;\n      }\n      /**\n       * Creates a new instance in accessTokens of this model.\n       *\n       * @param {any} id User id\n       *\n       * @param {object} data Request data.\n       *\n       * This method expects a subset of model properties as request parameters.\n       *\n       * @returns {object} An empty reference that will be\n       *   populated with the actual data once the response is returned\n       *   from the server.\n       *\n       * <em>\n       * (The remote method definition does not provide any description.\n       * This usually means the response is a `User` object.)\n       * </em>\n       */\n\n    }, {\n      key: \"createAccessTokens\",\n      value: function createAccessTokens(id) {\n        var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var customHeaders = arguments.length > 2 ? arguments[2] : undefined;\n        var _method = \"POST\";\n\n        var _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users/:id/accessTokens\";\n\n        var _routeParams = {\n          id: id\n        };\n        var _postBody = {\n          data: data\n        };\n        var _urlParams = {};\n        var result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n        return result;\n      }\n      /**\n       * Deletes all accessTokens of this model.\n       *\n       * @param {any} id User id\n       *\n       * @returns {object} An empty reference that will be\n       *   populated with the actual data once the response is returned\n       *   from the server.\n       *\n       * This method returns no data.\n       */\n\n    }, {\n      key: \"deleteAccessTokens\",\n      value: function deleteAccessTokens(id, customHeaders) {\n        var _method = \"DELETE\";\n\n        var _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users/:id/accessTokens\";\n\n        var _routeParams = {\n          id: id\n        };\n        var _postBody = {};\n        var _urlParams = {};\n        var result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n        return result;\n      }\n      /**\n       * Counts accessTokens of User.\n       *\n       * @param {any} id User id\n       *\n       * @param {object} where Criteria to match model instances\n       *\n       * @returns {object} An empty reference that will be\n       *   populated with the actual data once the response is returned\n       *   from the server.\n       *\n       * Data properties:\n       *\n       *  - `count` â€“ `{number}` -\n       */\n\n    }, {\n      key: \"countAccessTokens\",\n      value: function countAccessTokens(id) {\n        var where = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var customHeaders = arguments.length > 2 ? arguments[2] : undefined;\n        var _method = \"GET\";\n\n        var _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users/:id/accessTokens/count\";\n\n        var _routeParams = {\n          id: id\n        };\n        var _postBody = {};\n        var _urlParams = {};\n        if (typeof where !== 'undefined' && where !== null) _urlParams.where = where;\n        var result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n        return result;\n      }\n      /**\n       * Patch an existing model instance or insert a new one into the data source.\n       *\n       * @param {object} data Request data.\n       *\n       *  - `data` â€“ `{object}` - Model instance data\n       *\n       * @returns {object} An empty reference that will be\n       *   populated with the actual data once the response is returned\n       *   from the server.\n       *\n       * <em>\n       * (The remote method definition does not provide any description.\n       * This usually means the response is a `User` object.)\n       * </em>\n       */\n\n    }, {\n      key: \"patchOrCreate\",\n      value: function patchOrCreate() {\n        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var customHeaders = arguments.length > 1 ? arguments[1] : undefined;\n        var _method = \"PATCH\";\n\n        var _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users\";\n\n        var _routeParams = {};\n        var _postBody = {\n          data: data\n        };\n        var _urlParams = {};\n        var result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n        return result;\n      }\n      /**\n       * Patch attributes for a model instance and persist it into the data source.\n       *\n       * @param {any} id User id\n       *\n       * @param {object} data Request data.\n       *\n       *  - `data` â€“ `{object}` - An object of model property name/value pairs\n       *\n       * @returns {object} An empty reference that will be\n       *   populated with the actual data once the response is returned\n       *   from the server.\n       *\n       * <em>\n       * (The remote method definition does not provide any description.\n       * This usually means the response is a `User` object.)\n       * </em>\n       */\n\n    }, {\n      key: \"patchAttributes\",\n      value: function patchAttributes(id) {\n        var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var customHeaders = arguments.length > 2 ? arguments[2] : undefined;\n        var _method = \"PATCH\";\n\n        var _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users/:id\";\n\n        var _routeParams = {\n          id: id\n        };\n        var _postBody = {\n          data: data\n        };\n        var _urlParams = {};\n        var result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n        return result;\n      }\n      /**\n       * Login a user with username/email and password.\n       *\n       * @param {string} include Related objects to include in the response. See the description of return value for more details.\n       *   Default value: `user`.\n       *\n       *  - `rememberMe` - `boolean` - Whether the authentication credentials\n       *     should be remembered in localStorage across app/browser restarts.\n       *     Default: `true`.\n       *\n       * @param {object} data Request data.\n       *\n       * This method expects a subset of model properties as request parameters.\n       *\n       * @returns {object} An empty reference that will be\n       *   populated with the actual data once the response is returned\n       *   from the server.\n       *\n       * The response body contains properties of the AccessToken created on login.\n       * Depending on the value of `include` parameter, the body may contain additional properties:\n       *\n       *   - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)\n       *\n       *\n       */\n\n    }, {\n      key: \"login\",\n      value: function login(credentials) {\n        var _this2 = this;\n\n        var include = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'user';\n        var rememberMe = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n        var customHeaders = arguments.length > 3 ? arguments[3] : undefined;\n        var _method = \"POST\";\n\n        var _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users/login\";\n\n        var _routeParams = {};\n        var _postBody = {\n          credentials: credentials\n        };\n        var _urlParams = {};\n        if (typeof include !== 'undefined' && include !== null) _urlParams.include = include;\n        var result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders).map(function (response) {\n          response.ttl = parseInt(response.ttl);\n          response.rememberMe = rememberMe;\n\n          _this2.auth.setToken(response);\n\n          return response;\n        });\n        return result;\n      }\n      /**\n       * Logout a user with access token.\n       *\n       * @param {object} data Request data.\n       *\n       * This method does not accept any data. Supply an empty object.\n       *\n       * @returns {object} An empty reference that will be\n       *   populated with the actual data once the response is returned\n       *   from the server.\n       *\n       * This method returns no data.\n       */\n\n    }, {\n      key: \"logout\",\n      value: function logout(customHeaders) {\n        var _method = \"POST\";\n\n        var _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users/logout\";\n\n        var _routeParams = {};\n        var _postBody = {};\n        var _urlParams = {};\n        _urlParams.access_token = this.auth.getAccessTokenId();\n        this.auth.clear();\n        var result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n        return result;\n      }\n      /**\n       * Trigger user's identity verification with configured verifyOptions\n       *\n       * @param {any} id User id\n       *\n       * @param {object} data Request data.\n       *\n       * This method does not accept any data. Supply an empty object.\n       *\n       * @returns {object} An empty reference that will be\n       *   populated with the actual data once the response is returned\n       *   from the server.\n       *\n       * This method returns no data.\n       */\n\n    }, {\n      key: \"verify\",\n      value: function verify(id, customHeaders) {\n        var _method = \"POST\";\n\n        var _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users/:id/verify\";\n\n        var _routeParams = {\n          id: id\n        };\n        var _postBody = {};\n        var _urlParams = {};\n        var result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n        return result;\n      }\n      /**\n       * Confirm a user registration with identity verification token.\n       *\n       * @param {string} uid\n       *\n       * @param {string} token\n       *\n       * @param {string} redirect\n       *\n       * @returns {object} An empty reference that will be\n       *   populated with the actual data once the response is returned\n       *   from the server.\n       *\n       * This method returns no data.\n       */\n\n    }, {\n      key: \"confirm\",\n      value: function confirm(uid, token) {\n        var redirect = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        var customHeaders = arguments.length > 3 ? arguments[3] : undefined;\n        var _method = \"GET\";\n\n        var _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users/confirm\";\n\n        var _routeParams = {};\n        var _postBody = {};\n        var _urlParams = {};\n        if (typeof uid !== 'undefined' && uid !== null) _urlParams.uid = uid;\n        if (typeof token !== 'undefined' && token !== null) _urlParams.token = token;\n        if (typeof redirect !== 'undefined' && redirect !== null) _urlParams.redirect = redirect;\n        var result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n        return result;\n      }\n      /**\n       * Reset password for a user with email.\n       *\n       * @param {object} data Request data.\n       *\n       * This method expects a subset of model properties as request parameters.\n       *\n       * @returns {object} An empty reference that will be\n       *   populated with the actual data once the response is returned\n       *   from the server.\n       *\n       * This method returns no data.\n       */\n\n    }, {\n      key: \"resetPassword\",\n      value: function resetPassword(options, customHeaders) {\n        var _method = \"POST\";\n\n        var _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users/reset\";\n\n        var _routeParams = {};\n        var _postBody = {\n          options: options\n        };\n        var _urlParams = {};\n        var result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n        return result;\n      }\n      /**\n       * Change a user's password.\n       *\n       * @param {object} data Request data.\n       *\n       *  - `oldPassword` â€“ `{string}` -\n       *\n       *  - `newPassword` â€“ `{string}` -\n       *\n       * @returns {object} An empty reference that will be\n       *   populated with the actual data once the response is returned\n       *   from the server.\n       *\n       * This method returns no data.\n       */\n\n    }, {\n      key: \"changePassword\",\n      value: function changePassword(oldPassword, newPassword, customHeaders) {\n        var _method = \"POST\";\n\n        var _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users/change-password\";\n\n        var _routeParams = {};\n        var _postBody = {\n          data: {\n            oldPassword: oldPassword,\n            newPassword: newPassword\n          }\n        };\n        var _urlParams = {};\n        var result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n        return result;\n      }\n      /**\n       * Reset user's password via a password-reset token.\n       *\n       * @param {object} data Request data.\n       *\n       *  - `newPassword` â€“ `{string}` -\n       *\n       * @returns {object} An empty reference that will be\n       *   populated with the actual data once the response is returned\n       *   from the server.\n       *\n       * This method returns no data.\n       */\n\n    }, {\n      key: \"setPassword\",\n      value: function setPassword(newPassword, customHeaders) {\n        var _method = \"POST\";\n\n        var _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users/reset-password\";\n\n        var _routeParams = {};\n        var _postBody = {\n          data: {\n            newPassword: newPassword\n          }\n        };\n        var _urlParams = {};\n        var result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n        return result;\n      }\n      /**\n       * Creates a new instance in accessTokens of this model.\n       *\n       * @param {any} id User id\n       *\n       * @param {object} data Request data.\n       *\n       * This method expects a subset of model properties as request parameters.\n       *\n       * @returns {object[]} An empty reference that will be\n       *   populated with the actual data once the response is returned\n       *   from the server.\n       *\n       * <em>\n       * (The remote method definition does not provide any description.\n       * This usually means the response is a `User` object.)\n       * </em>\n       */\n\n    }, {\n      key: \"createManyAccessTokens\",\n      value: function createManyAccessTokens(id) {\n        var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n        var customHeaders = arguments.length > 2 ? arguments[2] : undefined;\n        var _method = \"POST\";\n\n        var _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users/:id/accessTokens\";\n\n        var _routeParams = {\n          id: id\n        };\n        var _postBody = {\n          data: data\n        };\n        var _urlParams = {};\n        var result = this.request(_method, _url, _routeParams, _urlParams, _postBody, null, customHeaders);\n        return result;\n      }\n      /**\n       * @ngdoc method\n       * @name sdk.User#getCurrent\n       * @methodOf sdk.User\n       *\n       * @description\n       *\n       * Get data of the currently logged user. Fail with HTTP result 401\n       * when there is no user logged in.\n       *\n       * @returns object An empty reference that will be\n       *   populated with the actual data once the response is returned\n       *   from the server.\n       */\n\n    }, {\n      key: \"getCurrent\",\n      value: function getCurrent() {\n        var filter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var _method = \"GET\";\n\n        var _url = LoopBackConfig.getPath() + \"/\" + LoopBackConfig.getApiVersion() + \"/Users\" + \"/:id\";\n\n        var id = this.auth.getCurrentUserId();\n        if (id == null) id = '__anonymous__';\n        var _routeParams = {\n          id: id\n        };\n        var _urlParams = {};\n        var _postBody = {};\n        if (filter) _urlParams.filter = filter;\n        return this.request(_method, _url, _routeParams, _urlParams, _postBody);\n      }\n      /**\n       * Get data of the currently logged user that was returned by the last\n       * call to {@link sdk.User#login} or\n       * {@link sdk.User#getCurrent}. Return null when there\n       * is no user logged in or the data of the current user were not fetched\n       * yet.\n       *\n       * @returns object An Account instance.\n       */\n\n    }, {\n      key: \"getCachedCurrent\",\n      value: function getCachedCurrent() {\n        return this.auth.getCurrentUserData();\n      }\n      /**\n       * Get data of the currently logged access tokern that was returned by the last\n       * call to {@link sdk.User#login}\n       *\n       * @returns object An AccessToken instance.\n       */\n\n    }, {\n      key: \"getCurrentToken\",\n      value: function getCurrentToken() {\n        return this.auth.getToken();\n      }\n      /**\n       * @name sdk.User#isAuthenticated\n       *\n       * @returns {boolean} True if the current user is authenticated (logged in).\n       */\n\n    }, {\n      key: \"isAuthenticated\",\n      value: function isAuthenticated() {\n        return !(this.getCurrentId() === '' || this.getCurrentId() == null || this.getCurrentId() == 'null');\n      }\n      /**\n       * @name sdk.User#getCurrentId\n       *\n       * @returns object Id of the currently logged-in user or null.\n       */\n\n    }, {\n      key: \"getCurrentId\",\n      value: function getCurrentId() {\n        return this.auth.getCurrentUserId();\n      }\n      /**\n       * The name of the model represented by this $resource,\n       * i.e. `User`.\n       */\n\n    }, {\n      key: \"getModelName\",\n      value: function getModelName() {\n        return \"User\";\n      }\n    }]);\n\n    return UserApi;\n  }(BaseLoopBackApi);\n\n  UserApi.Éµfac = function UserApi_Factory(t) {\n    return new (t || UserApi)(i0.ÉµÉµinject(Http), i0.ÉµÉµinject(SDKModels), i0.ÉµÉµinject(LoopBackAuth), i0.ÉµÉµinject(JSONSearchParams), i0.ÉµÉµinject(ErrorHandler, 8));\n  };\n\n  UserApi.Éµprov = /*@__PURE__*/i0.ÉµÉµdefineInjectable({\n    token: UserApi,\n    factory: UserApi.Éµfac\n  });\n  return UserApi;\n})();","map":null,"metadata":{},"sourceType":"module"}