{"ast":null,"code":"import _inherits from \"/Users/luiscotto/Documents/Projects/CS-470/practice/lafs-web/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/luiscotto/Documents/Projects/CS-470/practice/lafs-web/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _createClass from \"/Users/luiscotto/Documents/Projects/CS-470/practice/lafs-web/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/luiscotto/Documents/Projects/CS-470/practice/lafs-web/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Directive, EventEmitter, Input, isDevMode, Output, Injectable, SkipSelf, Optional, NgModule, ChangeDetectionStrategy, ChangeDetectorRef, Component, ViewEncapsulation, Inject, defineInjectable } from '@angular/core';\nimport { mixinDisabled, mixinInitialized, AnimationCurves, AnimationDurations } from '@angular/material/core';\nimport { Subject, merge } from 'rxjs';\nimport { animate, state, style, transition, trigger, keyframes, query, animateChild } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * \\@docs-private\n * @param {?} id\n * @return {?}\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nvar _c0 = [\"mat-sort-header\", \"\"];\n\nfunction MatSortHeader_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r2 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 3);\n    ɵngcc0.ɵɵlistener(\"@arrowPosition.start\", function MatSortHeader_div_3_Template_div_animation_arrowPosition_start_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      var ctx_r1 = ɵngcc0.ɵɵnextContext();\n      return ctx_r1._disableViewStateAnimation = true;\n    })(\"@arrowPosition.done\", function MatSortHeader_div_3_Template_div_animation_arrowPosition_done_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      var ctx_r3 = ɵngcc0.ɵɵnextContext();\n      return ctx_r3._disableViewStateAnimation = false;\n    });\n    ɵngcc0.ɵɵelement(1, \"div\", 4);\n    ɵngcc0.ɵɵelementStart(2, \"div\", 5);\n    ɵngcc0.ɵɵelement(3, \"div\", 6)(4, \"div\", 7)(5, \"div\", 8);\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@arrowOpacity\", ctx_r0._getArrowViewState())(\"@arrowPosition\", ctx_r0._getArrowViewState())(\"@allowChildren\", ctx_r0._getArrowDirectionState());\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"@indicator\", ctx_r0._getArrowDirectionState());\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"@leftPointer\", ctx_r0._getArrowDirectionState());\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"@rightPointer\", ctx_r0._getArrowDirectionState());\n  }\n}\n\nvar _c1 = [\"*\"];\n\nfunction getSortDuplicateSortableIdError(id) {\n  return Error(\"Cannot have two MatSortables with the same id (\".concat(id, \").\"));\n}\n/**\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getSortHeaderNotContainedWithinSortError() {\n  return Error(\"MatSortHeader must be placed within a parent element with the MatSort directive.\");\n}\n/**\n * \\@docs-private\n * @return {?}\n */\n\n\nfunction getSortHeaderMissingIdError() {\n  return Error(\"MatSortHeader must be provided with a unique id.\");\n}\n/**\n * \\@docs-private\n * @param {?} direction\n * @return {?}\n */\n\n\nfunction getSortInvalidDirectionError(direction) {\n  return Error(\"\".concat(direction, \" is not a valid sort direction ('asc' or 'desc').\"));\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to MatSort.\n\n/**\n * \\@docs-private\n */\n\n\nvar MatSortBase = /*#__PURE__*/_createClass(function MatSortBase() {\n  _classCallCheck(this, MatSortBase);\n});\n/** @type {?} */\n\n\nvar _MatSortMixinBase = /*#__PURE__*/mixinInitialized( /*#__PURE__*/mixinDisabled(MatSortBase));\n/**\n * Container for MatSortables to manage the sort state and provide default sort parameters.\n */\n\n\nvar MatSort = /*#__PURE__*/(function () {\n  var MatSort = /*#__PURE__*/function (_MatSortMixinBase2) {\n    _inherits(MatSort, _MatSortMixinBase2);\n\n    var _super = _createSuper(MatSort);\n\n    function MatSort() {\n      var _this;\n\n      _classCallCheck(this, MatSort);\n\n      _this = _super.apply(this, arguments);\n      /**\n       * Collection of all registered sortables that this directive manages.\n       */\n\n      _this.sortables = new Map();\n      /**\n       * Used to notify any child components listening to state changes.\n       */\n\n      _this._stateChanges = new Subject();\n      /**\n       * The direction to set when an MatSortable is initially sorted.\n       * May be overriden by the MatSortable's sort start.\n       */\n\n      _this.start = 'asc';\n      _this._direction = '';\n      /**\n       * Event emitted when the user changes either the active sort or sort direction.\n       */\n\n      _this.sortChange = new EventEmitter();\n      return _this;\n    }\n    /**\n     * The sort direction of the currently active MatSortable.\n     * @return {?}\n     */\n\n\n    _createClass(MatSort, [{\n      key: \"direction\",\n      get: function get() {\n        return this._direction;\n      }\n      /**\n       * @param {?} direction\n       * @return {?}\n       */\n      ,\n      set: function set(direction) {\n        if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n          throw getSortInvalidDirectionError(direction);\n        }\n\n        this._direction = direction;\n      }\n      /**\n       * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n       * May be overriden by the MatSortable's disable clear input.\n       * @return {?}\n       */\n\n    }, {\n      key: \"disableClear\",\n      get: function get() {\n        return this._disableClear;\n      }\n      /**\n       * @param {?} v\n       * @return {?}\n       */\n      ,\n      set: function set(v) {\n        this._disableClear = coerceBooleanProperty(v);\n      }\n      /**\n       * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n       * collection of MatSortables.\n       * @param {?} sortable\n       * @return {?}\n       */\n\n    }, {\n      key: \"register\",\n      value: function register(sortable) {\n        if (!sortable.id) {\n          throw getSortHeaderMissingIdError();\n        }\n\n        if (this.sortables.has(sortable.id)) {\n          throw getSortDuplicateSortableIdError(sortable.id);\n        }\n\n        this.sortables.set(sortable.id, sortable);\n      }\n      /**\n       * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n       * collection of contained MatSortables.\n       * @param {?} sortable\n       * @return {?}\n       */\n\n    }, {\n      key: \"deregister\",\n      value: function deregister(sortable) {\n        this.sortables.delete(sortable.id);\n      }\n      /**\n       * Sets the active sort id and determines the new sort direction.\n       * @param {?} sortable\n       * @return {?}\n       */\n\n    }, {\n      key: \"sort\",\n      value: function sort(sortable) {\n        if (this.active != sortable.id) {\n          this.active = sortable.id;\n          this.direction = sortable.start ? sortable.start : this.start;\n        } else {\n          this.direction = this.getNextSortDirection(sortable);\n        }\n\n        this.sortChange.emit({\n          active: this.active,\n          direction: this.direction\n        });\n      }\n      /**\n       * Returns the next sort direction of the active sortable, checking for potential overrides.\n       * @param {?} sortable\n       * @return {?}\n       */\n\n    }, {\n      key: \"getNextSortDirection\",\n      value: function getNextSortDirection(sortable) {\n        if (!sortable) {\n          return '';\n        } // Get the sort direction cycle with the potential sortable overrides.\n\n        /** @type {?} */\n\n\n        var disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n        /** @type {?} */\n\n        var sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear); // Get and return the next direction in the cycle\n\n        /** @type {?} */\n\n        var nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n\n        if (nextDirectionIndex >= sortDirectionCycle.length) {\n          nextDirectionIndex = 0;\n        }\n\n        return sortDirectionCycle[nextDirectionIndex];\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        this._markInitialized();\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges() {\n        this._stateChanges.next();\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._stateChanges.complete();\n      }\n    }]);\n\n    return MatSort;\n  }(_MatSortMixinBase);\n\n  MatSort.ɵfac = /*@__PURE__*/function () {\n    var ɵMatSort_BaseFactory;\n    return function MatSort_Factory(t) {\n      return (ɵMatSort_BaseFactory || (ɵMatSort_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatSort)))(t || MatSort);\n    };\n  }();\n\n  MatSort.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MatSort,\n    selectors: [[\"\", \"matSort\", \"\"]],\n    inputs: {\n      disabled: [\"matSortDisabled\", \"disabled\"],\n      start: [\"matSortStart\", \"start\"],\n      direction: [\"matSortDirection\", \"direction\"],\n      disableClear: [\"matSortDisableClear\", \"disableClear\"],\n      active: [\"matSortActive\", \"active\"]\n    },\n    outputs: {\n      sortChange: \"matSortChange\"\n    },\n    exportAs: [\"matSort\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return MatSort;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Returns the sort direction cycle to use given the provided parameters of order and clear.\n * @param {?} start\n * @param {?} disableClear\n * @return {?}\n */\n\n\nfunction getSortDirectionCycle(start, disableClear) {\n  /** @type {?} */\n  var sortOrder = ['asc', 'desc'];\n\n  if (start == 'desc') {\n    sortOrder.reverse();\n  }\n\n  if (!disableClear) {\n    sortOrder.push('');\n  }\n\n  return sortOrder;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' + AnimationCurves.STANDARD_CURVE;\n/**\n * Animations used by MatSort.\n * \\@docs-private\n * @type {?}\n */\n\nvar matSortAnimations = {\n  /**\n   * Animation that moves the sort indicator.\n   */\n  indicator: /*#__PURE__*/trigger('indicator', [/*#__PURE__*/state('active-asc, asc', /*#__PURE__*/style({\n    transform: 'translateY(0px)'\n  })),\n  /*#__PURE__*/\n  // 10px is the height of the sort indicator, minus the width of the pointers\n  state('active-desc, desc', /*#__PURE__*/style({\n    transform: 'translateY(10px)'\n  })), /*#__PURE__*/transition('active-asc <=> active-desc', /*#__PURE__*/animate(SORT_ANIMATION_TRANSITION))]),\n\n  /**\n   * Animation that rotates the left pointer of the indicator based on the sorting direction.\n   */\n  leftPointer: /*#__PURE__*/trigger('leftPointer', [/*#__PURE__*/state('active-asc, asc', /*#__PURE__*/style({\n    transform: 'rotate(-45deg)'\n  })), /*#__PURE__*/state('active-desc, desc', /*#__PURE__*/style({\n    transform: 'rotate(45deg)'\n  })), /*#__PURE__*/transition('active-asc <=> active-desc', /*#__PURE__*/animate(SORT_ANIMATION_TRANSITION))]),\n\n  /**\n   * Animation that rotates the right pointer of the indicator based on the sorting direction.\n   */\n  rightPointer: /*#__PURE__*/trigger('rightPointer', [/*#__PURE__*/state('active-asc, asc', /*#__PURE__*/style({\n    transform: 'rotate(45deg)'\n  })), /*#__PURE__*/state('active-desc, desc', /*#__PURE__*/style({\n    transform: 'rotate(-45deg)'\n  })), /*#__PURE__*/transition('active-asc <=> active-desc', /*#__PURE__*/animate(SORT_ANIMATION_TRANSITION))]),\n\n  /**\n   * Animation that controls the arrow opacity.\n   */\n  arrowOpacity: /*#__PURE__*/trigger('arrowOpacity', [/*#__PURE__*/state('desc-to-active, asc-to-active, active', /*#__PURE__*/style({\n    opacity: 1\n  })), /*#__PURE__*/state('desc-to-hint, asc-to-hint, hint', /*#__PURE__*/style({\n    opacity: .54\n  })), /*#__PURE__*/state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void', /*#__PURE__*/style({\n    opacity: 0\n  })),\n  /*#__PURE__*/\n  // Transition between all states except for immediate transitions\n  transition('* => asc, * => desc, * => active, * => hint, * => void', /*#__PURE__*/animate('0ms')), /*#__PURE__*/transition('* <=> *', /*#__PURE__*/animate(SORT_ANIMATION_TRANSITION))]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: /*#__PURE__*/trigger('arrowPosition', [\n  /*#__PURE__*/\n  // Hidden Above => Hint Center\n  transition('* => desc-to-hint, * => desc-to-active', /*#__PURE__*/animate(SORT_ANIMATION_TRANSITION, /*#__PURE__*/keyframes([/*#__PURE__*/style({\n    transform: 'translateY(-25%)'\n  }), /*#__PURE__*/style({\n    transform: 'translateY(0)'\n  })]))),\n  /*#__PURE__*/\n  // Hint Center => Hidden Below\n  transition('* => hint-to-desc, * => active-to-desc', /*#__PURE__*/animate(SORT_ANIMATION_TRANSITION, /*#__PURE__*/keyframes([/*#__PURE__*/style({\n    transform: 'translateY(0)'\n  }), /*#__PURE__*/style({\n    transform: 'translateY(25%)'\n  })]))),\n  /*#__PURE__*/\n  // Hidden Below => Hint Center\n  transition('* => asc-to-hint, * => asc-to-active', /*#__PURE__*/animate(SORT_ANIMATION_TRANSITION, /*#__PURE__*/keyframes([/*#__PURE__*/style({\n    transform: 'translateY(25%)'\n  }), /*#__PURE__*/style({\n    transform: 'translateY(0)'\n  })]))),\n  /*#__PURE__*/\n  // Hint Center => Hidden Above\n  transition('* => hint-to-asc, * => active-to-asc', /*#__PURE__*/animate(SORT_ANIMATION_TRANSITION, /*#__PURE__*/keyframes([/*#__PURE__*/style({\n    transform: 'translateY(0)'\n  }), /*#__PURE__*/style({\n    transform: 'translateY(-25%)'\n  })]))), /*#__PURE__*/state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active', /*#__PURE__*/style({\n    transform: 'translateY(0)'\n  })), /*#__PURE__*/state('hint-to-desc, active-to-desc, desc', /*#__PURE__*/style({\n    transform: 'translateY(-25%)'\n  })), /*#__PURE__*/state('hint-to-asc, active-to-asc, asc', /*#__PURE__*/style({\n    transform: 'translateY(25%)'\n  }))]),\n\n  /**\n   * Necessary trigger that calls animate on children animations.\n   */\n  allowChildren: /*#__PURE__*/trigger('allowChildren', [/*#__PURE__*/transition('* <=> *', [/*#__PURE__*/query('@*', /*#__PURE__*/animateChild(), {\n    optional: true\n  })])])\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n\nvar MatSortHeaderIntl = /*#__PURE__*/_createClass(function MatSortHeaderIntl() {\n  _classCallCheck(this, MatSortHeaderIntl);\n\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  this.changes = new Subject();\n  /**\n   * ARIA label for the sorting button.\n   */\n\n  this.sortButtonLabel = function (id) {\n    return \"Change sorting for \".concat(id);\n  };\n});\n\nMatSortHeaderIntl.ɵfac = function MatSortHeaderIntl_Factory(t) {\n  return new (t || MatSortHeaderIntl)();\n};\n\nMatSortHeaderIntl.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: MatSortHeaderIntl,\n  factory: MatSortHeaderIntl.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\nMatSortHeaderIntl.ngInjectableDef = /*#__PURE__*/defineInjectable({\n  factory: function MatSortHeaderIntl_Factory() {\n    return new MatSortHeaderIntl();\n  },\n  token: MatSortHeaderIntl,\n  providedIn: \"root\"\n});\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * \\@docs-private\n * @param {?} parentIntl\n * @return {?}\n */\n\n\nfunction MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n/**\n * \\@docs-private\n * @type {?}\n */\n\n\nvar MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[/*#__PURE__*/new Optional(), /*#__PURE__*/new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// Boilerplate for applying mixins to the sort header.\n\n/**\n * \\@docs-private\n */\n\nvar MatSortHeaderBase = /*#__PURE__*/_createClass(function MatSortHeaderBase() {\n  _classCallCheck(this, MatSortHeaderBase);\n});\n/** @type {?} */\n\n\nvar _MatSortHeaderMixinBase = /*#__PURE__*/mixinDisabled(MatSortHeaderBase);\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n\n\nvar MatSortHeader = /*#__PURE__*/(function () {\n  var MatSortHeader = /*#__PURE__*/function (_MatSortHeaderMixinBa) {\n    _inherits(MatSortHeader, _MatSortHeaderMixinBa);\n\n    var _super2 = _createSuper(MatSortHeader);\n\n    /**\n     * @param {?} _intl\n     * @param {?} changeDetectorRef\n     * @param {?} _sort\n     * @param {?} _columnDef\n     */\n    function MatSortHeader(_intl, changeDetectorRef, _sort, _columnDef) {\n      var _this2;\n\n      _classCallCheck(this, MatSortHeader);\n\n      // Note that we use a string token for the `_columnDef`, because the value is provided both by\n      // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n      // and we want to avoid having the sort header depending on the CDK table because\n      // of this single reference.\n      _this2 = _super2.call(this);\n      _this2._intl = _intl;\n      _this2._sort = _sort;\n      _this2._columnDef = _columnDef;\n      /**\n       * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n       * provide an affordance that the header is sortable by showing on focus and hover.\n       */\n\n      _this2._showIndicatorHint = false;\n      /**\n       * The direction the arrow should be facing according to the current state.\n       */\n\n      _this2._arrowDirection = '';\n      /**\n       * Whether the view state animation should show the transition between the `from` and `to` states.\n       */\n\n      _this2._disableViewStateAnimation = false;\n      /**\n       * Sets the position of the arrow that displays when sorted.\n       */\n\n      _this2.arrowPosition = 'after';\n\n      if (!_sort) {\n        throw getSortHeaderNotContainedWithinSortError();\n      }\n\n      _this2._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes).subscribe(function () {\n        if (_this2._isSorted()) {\n          _this2._updateArrowDirection();\n        } // If this header was recently active and now no longer sorted, animate away the arrow.\n\n\n        if (!_this2._isSorted() && _this2._viewState && _this2._viewState.toState === 'active') {\n          _this2._disableViewStateAnimation = false;\n\n          _this2._setAnimationTransitionState({\n            fromState: 'active',\n            toState: _this2._arrowDirection\n          });\n        }\n\n        changeDetectorRef.markForCheck();\n      });\n      return _this2;\n    }\n    /**\n     * Overrides the disable clear value of the containing MatSort for this MatSortable.\n     * @return {?}\n     */\n\n\n    _createClass(MatSortHeader, [{\n      key: \"disableClear\",\n      get: function get() {\n        return this._disableClear;\n      }\n      /**\n       * @param {?} v\n       * @return {?}\n       */\n      ,\n      set: function set(v) {\n        this._disableClear = coerceBooleanProperty(v);\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        if (!this.id && this._columnDef) {\n          this.id = this._columnDef.name;\n        } // Initialize the direction of the arrow and set the view state to be immediately that state.\n\n\n        this._updateArrowDirection();\n\n        this._setAnimationTransitionState({\n          toState: this._isSorted() ? 'active' : this._arrowDirection\n        });\n\n        this._sort.register(this);\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        this._sort.deregister(this);\n\n        this._rerenderSubscription.unsubscribe();\n      }\n      /**\n       * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n       * user showing what the active sort will become. If set to false, the arrow will fade away.\n       * @param {?} visible\n       * @return {?}\n       */\n\n    }, {\n      key: \"_setIndicatorHintVisible\",\n      value: function _setIndicatorHintVisible(visible) {\n        // No-op if the sort header is disabled - should not make the hint visible.\n        if (this._isDisabled() && visible) {\n          return;\n        }\n\n        this._showIndicatorHint = visible;\n\n        if (!this._isSorted()) {\n          this._updateArrowDirection();\n\n          if (this._showIndicatorHint) {\n            this._setAnimationTransitionState({\n              fromState: this._arrowDirection,\n              toState: 'hint'\n            });\n          } else {\n            this._setAnimationTransitionState({\n              fromState: 'hint',\n              toState: this._arrowDirection\n            });\n          }\n        }\n      }\n      /**\n       * Sets the animation transition view state for the arrow's position and opacity. If the\n       * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n       * no animation appears.\n       * @param {?} viewState\n       * @return {?}\n       */\n\n    }, {\n      key: \"_setAnimationTransitionState\",\n      value: function _setAnimationTransitionState(viewState) {\n        this._viewState = viewState; // If the animation for arrow position state (opacity/translation) should be disabled,\n        // remove the fromState so that it jumps right to the toState.\n\n        if (this._disableViewStateAnimation) {\n          this._viewState = {\n            toState: viewState.toState\n          };\n        }\n      }\n      /**\n       * Triggers the sort on this sort header and removes the indicator hint.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_handleClick\",\n      value: function _handleClick() {\n        if (this._isDisabled()) {\n          return;\n        }\n\n        this._sort.sort(this); // Do not show the animation if the header was already shown in the right position.\n\n\n        if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n          this._disableViewStateAnimation = true;\n        } // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n        // the direction it is facing.\n\n        /** @type {?} */\n\n\n        var viewState = this._isSorted() ? {\n          fromState: this._arrowDirection,\n          toState: 'active'\n        } : {\n          fromState: 'active',\n          toState: this._arrowDirection\n        };\n\n        this._setAnimationTransitionState(viewState);\n\n        this._showIndicatorHint = false;\n      }\n      /**\n       * Whether this MatSortHeader is currently sorted in either ascending or descending order.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_isSorted\",\n      value: function _isSorted() {\n        return this._sort.active == this.id && (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n      }\n      /**\n       * Returns the animation state for the arrow direction (indicator and pointers).\n       * @return {?}\n       */\n\n    }, {\n      key: \"_getArrowDirectionState\",\n      value: function _getArrowDirectionState() {\n        return \"\".concat(this._isSorted() ? 'active-' : '').concat(this._arrowDirection);\n      }\n      /**\n       * Returns the arrow position state (opacity, translation).\n       * @return {?}\n       */\n\n    }, {\n      key: \"_getArrowViewState\",\n      value: function _getArrowViewState() {\n        /** @type {?} */\n        var fromState = this._viewState.fromState;\n        return (fromState ? \"\".concat(fromState, \"-to-\") : '') + this._viewState.toState;\n      }\n      /**\n       * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n       * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n       * active sorted direction. The reason this is updated through a function is because the direction\n       * should only be changed at specific times - when deactivated but the hint is displayed and when\n       * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n       * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n       * preserving its direction, even though the next sort direction is actually different and should\n       * only be changed once the arrow displays again (hint or activation).\n       * @return {?}\n       */\n\n    }, {\n      key: \"_updateArrowDirection\",\n      value: function _updateArrowDirection() {\n        this._arrowDirection = this._isSorted() ? this._sort.direction : this.start || this._sort.start;\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"_isDisabled\",\n      value: function _isDisabled() {\n        return this._sort.disabled || this.disabled;\n      }\n      /**\n       * Gets the aria-sort attribute that should be applied to this sort header. If this header\n       * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n       * says that the aria-sort property should only be present on one header at a time, so removing\n       * ensures this is true.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_getAriaSortAttribute\",\n      value: function _getAriaSortAttribute() {\n        if (!this._isSorted()) {\n          return null;\n        }\n\n        return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n      }\n      /**\n       * Whether the arrow inside the sort header should be rendered.\n       * @return {?}\n       */\n\n    }, {\n      key: \"_renderArrow\",\n      value: function _renderArrow() {\n        return !this._isDisabled() || this._isSorted();\n      }\n    }]);\n\n    return MatSortHeader;\n  }(_MatSortHeaderMixinBase);\n\n  MatSortHeader.ɵfac = function MatSortHeader_Factory(t) {\n    return new (t || MatSortHeader)(ɵngcc0.ɵɵdirectiveInject(MatSortHeaderIntl), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MatSort, 8), ɵngcc0.ɵɵdirectiveInject('MAT_SORT_HEADER_COLUMN_DEF', 8));\n  };\n\n  MatSortHeader.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: MatSortHeader,\n    selectors: [[\"\", \"mat-sort-header\", \"\"]],\n    hostVars: 3,\n    hostBindings: function MatSortHeader_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatSortHeader_click_HostBindingHandler() {\n          return ctx._handleClick();\n        })(\"mouseenter\", function MatSortHeader_mouseenter_HostBindingHandler() {\n          return ctx._setIndicatorHintVisible(true);\n        })(\"longpress\", function MatSortHeader_longpress_HostBindingHandler() {\n          return ctx._setIndicatorHintVisible(true);\n        })(\"mouseleave\", function MatSortHeader_mouseleave_HostBindingHandler() {\n          return ctx._setIndicatorHintVisible(false);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-sort\", ctx._getAriaSortAttribute());\n        ɵngcc0.ɵɵclassProp(\"mat-sort-header-disabled\", ctx._isDisabled());\n      }\n    },\n    inputs: {\n      disabled: \"disabled\",\n      arrowPosition: \"arrowPosition\",\n      disableClear: \"disableClear\",\n      id: [\"mat-sort-header\", \"id\"],\n      start: \"start\"\n    },\n    exportAs: [\"matSortHeader\"],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    attrs: _c0,\n    ngContentSelectors: _c1,\n    decls: 4,\n    vars: 7,\n    consts: [[1, \"mat-sort-header-container\"], [\"type\", \"button\", 1, \"mat-sort-header-button\", 3, \"focus\", \"blur\"], [\"class\", \"mat-sort-header-arrow\", 4, \"ngIf\"], [1, \"mat-sort-header-arrow\"], [1, \"mat-sort-header-stem\"], [1, \"mat-sort-header-indicator\"], [1, \"mat-sort-header-pointer-left\"], [1, \"mat-sort-header-pointer-right\"], [1, \"mat-sort-header-pointer-middle\"]],\n    template: function MatSortHeader_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0)(1, \"button\", 1);\n        ɵngcc0.ɵɵlistener(\"focus\", function MatSortHeader_Template_button_focus_1_listener() {\n          return ctx._setIndicatorHintVisible(true);\n        })(\"blur\", function MatSortHeader_Template_button_blur_1_listener() {\n          return ctx._setIndicatorHintVisible(false);\n        });\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(3, MatSortHeader_div_3_Template, 6, 6, \"div\", 2);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-sort-header-sorted\", ctx._isSorted())(\"mat-sort-header-position-before\", ctx.arrowPosition == \"before\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"disabled\", ctx._isDisabled() || null)(\"aria-label\", ctx._intl.sortButtonLabel(ctx.id));\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx._renderArrow());\n      }\n    },\n    directives: [ɵngcc1.NgIf],\n    styles: [\".mat-sort-header-container{display:flex;cursor:pointer;align-items:center}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-button{border:none;background:0 0;display:flex;align-items:center;padding:0;cursor:inherit;outline:0;font:inherit;color:currentColor}.mat-sort-header-button::-moz-focus-inner{border:0}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;position:relative;display:flex;opacity:0}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}@media (-ms-high-contrast:active){.mat-sort-header-stem{width:0;border-left:solid 2px}}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}@media (-ms-high-contrast:active){.mat-sort-header-pointer-middle{width:0;height:0;border-top:solid 2px;border-left:solid 2px}}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}@media (-ms-high-contrast:active){.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{width:0;height:0;border-left:solid 6px;border-top:solid 2px}}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}\"],\n    encapsulation: 2,\n    data: {\n      animation: [matSortAnimations.indicator, matSortAnimations.leftPointer, matSortAnimations.rightPointer, matSortAnimations.arrowOpacity, matSortAnimations.arrowPosition, matSortAnimations.allowChildren]\n    },\n    changeDetection: 0\n  });\n  /** @nocollapse */\n\n  return MatSortHeader;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar MatSortModule = /*#__PURE__*/(function () {\n  var MatSortModule = /*#__PURE__*/_createClass(function MatSortModule() {\n    _classCallCheck(this, MatSortModule);\n  });\n\n  MatSortModule.ɵfac = function MatSortModule_Factory(t) {\n    return new (t || MatSortModule)();\n  };\n\n  MatSortModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: MatSortModule\n  });\n  MatSortModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [MAT_SORT_HEADER_INTL_PROVIDER],\n    imports: [[CommonModule]]\n  });\n  return MatSortModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSortModule, {\n    declarations: function declarations() {\n      return [MatSort, MatSortHeader];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [MatSort, MatSortHeader];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { MatSortModule, MatSortHeaderBase, _MatSortHeaderMixinBase, MatSortHeader, MAT_SORT_HEADER_INTL_PROVIDER_FACTORY, MatSortHeaderIntl, MAT_SORT_HEADER_INTL_PROVIDER, MatSortBase, _MatSortMixinBase, MatSort, matSortAnimations }; //# sourceMappingURL=sort.js.map","map":null,"metadata":{},"sourceType":"module"}