{"ast":null,"code":"import _classCallCheck from \"/Users/luiscotto/Documents/Projects/CS-470/practice/lafs-web/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/luiscotto/Documents/Projects/CS-470/practice/lafs-web/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as i0 from \"@angular/core\";\n/**\n* @author Jonathan Casarrubias <twitter:@johncasarrubias> <github:@mean-expert-official>\n* @module CookieBrowser\n* @license MIT\n* @description\n* This module handle cookies, it will be provided using DI Swapping according the\n* SDK Socket Driver Available currently supporting Angular 2 for web and NativeScript 2.\n**/\n\nexport var CookieBrowser = /*#__PURE__*/(function () {\n  var CookieBrowser = /*#__PURE__*/function () {\n    function CookieBrowser() {\n      _classCallCheck(this, CookieBrowser);\n\n      /**\n       * @type {CookieInterface}\n       **/\n      this.cookies = {};\n    }\n    /**\n     * @method get\n     * @param {string} key Cookie key name\n     * @return {any}\n     * @description\n     * The getter will return any type of data persisted in cookies.\n     **/\n\n\n    _createClass(CookieBrowser, [{\n      key: \"get\",\n      value: function get(key) {\n        if (!this.cookies[key]) {\n          var cookie = window.document.cookie.split('; ').filter(function (item) {\n            return item.split('=')[0] === key;\n          }).pop();\n\n          if (!cookie) {\n            return null;\n          }\n\n          this.cookies[key] = this.parse(cookie.split('=').slice(1).join('='));\n        }\n\n        return this.cookies[key];\n      }\n      /**\n       * @method set\n       * @param {string} key Cookie key name\n       * @param {any} value Any value\n       * @param {Date=} expires The date of expiration (Optional)\n       * @return {void}\n       * @description\n       * The setter will return any type of data persisted in cookies.\n       **/\n\n    }, {\n      key: \"set\",\n      value: function set(key, value, expires) {\n        this.cookies[key] = value;\n        var cookie = \"\".concat(key, \"=\").concat(value, \"; path=/\").concat(expires ? \"; expires=\".concat(expires.toUTCString()) : '');\n        window.document.cookie = cookie;\n      }\n      /**\n       * @method remove\n       * @param {string} key Cookie key name\n       * @return {void}\n       * @description\n       * This method will remove a cookie from the client.\n       **/\n\n    }, {\n      key: \"remove\",\n      value: function remove(key) {\n        document.cookie = key + '=; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT;';\n        delete this.cookies[key];\n      }\n      /**\n       * @method parse\n       * @param {any} value Input data expected to be JSON\n       * @return {void}\n       * @description\n       * This method will parse the string as JSON if possible, otherwise will\n       * return the value itself.\n       **/\n\n    }, {\n      key: \"parse\",\n      value: function parse(value) {\n        try {\n          return JSON.parse(value);\n        } catch (e) {\n          return value;\n        }\n      }\n    }]);\n\n    return CookieBrowser;\n  }();\n\n  CookieBrowser.ɵfac = function CookieBrowser_Factory(t) {\n    return new (t || CookieBrowser)();\n  };\n\n  CookieBrowser.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CookieBrowser,\n    factory: CookieBrowser.ɵfac\n  });\n  return CookieBrowser;\n})();","map":null,"metadata":{},"sourceType":"module"}