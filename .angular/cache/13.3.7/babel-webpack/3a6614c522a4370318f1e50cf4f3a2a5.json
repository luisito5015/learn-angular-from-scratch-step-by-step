{"ast":null,"code":"import _classCallCheck from \"/Users/luiscotto/Documents/Projects/CS-470/practice/lafs-web/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/luiscotto/Documents/Projects/CS-470/practice/lafs-web/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { InternalStorage } from '../../storage/storage.swaps';\nimport { SDKToken } from '../../models/BaseModels';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../storage/storage.swaps\";\n/**\n* @author Jonathan Casarrubias <twitter:@johncasarrubias> <github:@mean-expert-official>\n* @module SocketConnection\n* @license MIT\n* @description\n* This module handle socket connections and return singleton instances for each\n* connection, it will use the SDK Socket Driver Available currently supporting\n* Angular 2 for web, NativeScript 2 and Angular Universal.\n**/\n\nexport var LoopBackAuth = /*#__PURE__*/(function () {\n  var LoopBackAuth = /*#__PURE__*/function () {\n    /**\n     * @method constructor\n     * @param {InternalStorage} storage Internal Storage Driver\n     * @description\n     * The constructor will initialize the token loading data from storage\n     **/\n    function LoopBackAuth(storage) {\n      _classCallCheck(this, LoopBackAuth);\n\n      this.storage = storage;\n      /**\n       * @type {SDKToken}\n       **/\n\n      this.token = new SDKToken();\n      /**\n       * @type {string}\n       **/\n\n      this.prefix = '$LoopBackSDK$';\n      this.token.id = this.load('id');\n      this.token.user = this.load('user');\n      this.token.userId = this.load('userId');\n      this.token.created = this.load('created');\n      this.token.ttl = this.load('ttl');\n      this.token.rememberMe = this.load('rememberMe');\n    }\n    /**\n     * @method setRememberMe\n     * @param {boolean} value Flag to remember credentials\n     * @return {void}\n     * @description\n     * This method will set a flag in order to remember the current credentials\n     **/\n\n\n    _createClass(LoopBackAuth, [{\n      key: \"setRememberMe\",\n      value: function setRememberMe(value) {\n        this.token.rememberMe = value;\n      }\n      /**\n       * @method setUser\n       * @param {any} user Any type of user model\n       * @return {void}\n       * @description\n       * This method will update the user information and persist it if the\n       * rememberMe flag is set.\n       **/\n\n    }, {\n      key: \"setUser\",\n      value: function setUser(user) {\n        this.token.user = user;\n        this.save();\n      }\n      /**\n       * @method setToken\n       * @param {SDKToken} token SDKToken or casted AccessToken instance\n       * @return {void}\n       * @description\n       * This method will set a flag in order to remember the current credentials\n       **/\n\n    }, {\n      key: \"setToken\",\n      value: function setToken(token) {\n        this.token = Object.assign({}, this.token, token);\n        this.save();\n      }\n      /**\n       * @method getToken\n       * @return {void}\n       * @description\n       * This method will set a flag in order to remember the current credentials.\n       **/\n\n    }, {\n      key: \"getToken\",\n      value: function getToken() {\n        return this.token;\n      }\n      /**\n       * @method getAccessTokenId\n       * @return {string}\n       * @description\n       * This method will return the actual token string, not the object instance.\n       **/\n\n    }, {\n      key: \"getAccessTokenId\",\n      value: function getAccessTokenId() {\n        return this.token.id;\n      }\n      /**\n       * @method getCurrentUserId\n       * @return {any}\n       * @description\n       * This method will return the current user id, it can be number or string.\n       **/\n\n    }, {\n      key: \"getCurrentUserId\",\n      value: function getCurrentUserId() {\n        return this.token.userId;\n      }\n      /**\n       * @method getCurrentUserData\n       * @return {any}\n       * @description\n       * This method will return the current user instance.\n       **/\n\n    }, {\n      key: \"getCurrentUserData\",\n      value: function getCurrentUserData() {\n        return typeof this.token.user === 'string' ? JSON.parse(this.token.user) : this.token.user;\n      }\n      /**\n       * @method save\n       * @return {boolean} Whether or not the information was saved\n       * @description\n       * This method will save in either local storage or cookies the current credentials.\n       * But only if rememberMe is enabled.\n       **/\n\n    }, {\n      key: \"save\",\n      value: function save() {\n        var today = new Date();\n        var expires = new Date(today.getTime() + this.token.ttl * 1000);\n        this.persist('id', this.token.id, expires);\n        this.persist('user', this.token.user, expires);\n        this.persist('userId', this.token.userId, expires);\n        this.persist('created', this.token.created, expires);\n        this.persist('ttl', this.token.ttl, expires);\n        this.persist('rememberMe', this.token.rememberMe, expires);\n        return true;\n      }\n    }, {\n      key: \"load\",\n      value:\n      /**\n       * @method load\n       * @param {string} prop Property name\n       * @return {any} Any information persisted in storage\n       * @description\n       * This method will load either from local storage or cookies the provided property.\n       **/\n      function load(prop) {\n        return this.storage.get(\"\".concat(this.prefix).concat(prop));\n      }\n      /**\n       * @method clear\n       * @return {void}\n       * @description\n       * This method will clear cookies or the local storage.\n       **/\n\n    }, {\n      key: \"clear\",\n      value: function clear() {\n        var _this = this;\n\n        Object.keys(this.token).forEach(function (prop) {\n          return _this.storage.remove(\"\".concat(_this.prefix).concat(prop));\n        });\n        this.token = new SDKToken();\n      }\n      /**\n       * @method persist\n       * @return {void}\n       * @description\n       * This method saves values to storage\n       **/\n\n    }, {\n      key: \"persist\",\n      value: function persist(prop, value, expires) {\n        try {\n          this.storage.set(\"\".concat(this.prefix).concat(prop), typeof value === 'object' ? JSON.stringify(value) : value, this.token.rememberMe ? expires : null);\n        } catch (err) {\n          console.error('Cannot access local/session storage:', err);\n        }\n      }\n    }]);\n\n    return LoopBackAuth;\n  }();\n\n  LoopBackAuth.ɵfac = function LoopBackAuth_Factory(t) {\n    return new (t || LoopBackAuth)(i0.ɵɵinject(InternalStorage));\n  };\n\n  LoopBackAuth.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoopBackAuth,\n    factory: LoopBackAuth.ɵfac\n  });\n  return LoopBackAuth;\n})();","map":null,"metadata":{},"sourceType":"module"}