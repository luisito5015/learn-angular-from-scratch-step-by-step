{"ast":null,"code":"import _classCallCheck from \"/Users/luiscotto/Documents/Projects/CS-470/practice/lafs-web/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/luiscotto/Documents/Projects/CS-470/practice/lafs-web/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Http, Headers, Request, RequestOptions } from '@angular/http';\nimport { JSONSearchParams } from './search.params';\nimport { ErrorHandler } from './error.service';\nimport { LoopBackAuth } from './auth.service';\nimport { LoopBackConfig } from '../../lb.config';\nimport { LoopBackFilter } from '../../models/BaseModels';\nimport { SDKModels } from '../custom/SDKModels';\nimport { Subject } from 'rxjs/Subject';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/operator/map';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/http\";\nimport * as i2 from \"../custom/SDKModels\";\nimport * as i3 from \"./auth.service\";\nimport * as i4 from \"./search.params\";\nimport * as i5 from \"./error.service\";\n/**\n* @module BaseLoopBackApi\n* @author Jonathan Casarrubias <@johncasarrubias> <github:jonathan-casarrubias>\n* @author Nikolay Matiushenkov <https://github.com/mnvx>\n* @license MIT\n* @description\n* Abstract class that will be implemented in every custom service automatically built\n* by the sdk builder.\n* It provides the core functionallity for every API call, either by HTTP Calls or by\n* WebSockets.\n**/\n\nexport var BaseLoopBackApi = /*#__PURE__*/(function () {\n  var BaseLoopBackApi = /*#__PURE__*/function () {\n    function BaseLoopBackApi(http, models, auth, searchParams, errorHandler) {\n      _classCallCheck(this, BaseLoopBackApi);\n\n      this.http = http;\n      this.models = models;\n      this.auth = auth;\n      this.searchParams = searchParams;\n      this.errorHandler = errorHandler;\n      this.model = this.models.get(this.getModelName());\n    }\n    /**\n     * @method request\n     * @param {string}  method      Request method (GET, POST, PUT)\n     * @param {string}  url         Request url (my-host/my-url/:id)\n     * @param {any}     routeParams Values of url parameters\n     * @param {any}     urlParams   Parameters for building url (filter and other)\n     * @param {any}     postBody    Request postBody\n     * @return {Observable<any>}\n     * @description\n     * This is a core method, every HTTP Call will be done from here, every API Service will\n     * extend this class and use this method to get RESTful communication.\n     **/\n\n\n    _createClass(BaseLoopBackApi, [{\n      key: \"request\",\n      value: function request(method, url) {\n        var _this = this;\n\n        var routeParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        var urlParams = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n        var postBody = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n        var pubsub = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n        var customHeaders = arguments.length > 6 ? arguments[6] : undefined;\n        // Transpile route variables to the actual request Values\n        Object.keys(routeParams).forEach(function (key) {\n          url = url.replace(new RegExp(\":\" + key + \"(\\/|$)\", \"g\"), routeParams[key] + \"$1\");\n        });\n\n        if (pubsub) {\n          console.info('SDK: PubSub functionality is disabled, generate SDK using -io enabled');\n        } else {\n          // Headers to be sent\n          var headers = new Headers();\n          headers.append('Content-Type', 'application/json'); // Authenticate request\n\n          this.authenticate(url, headers); // Body fix for built in remote methods using \"data\", \"options\" or \"credentials\n          // that are the actual body, Custom remote method properties are different and need\n          // to be wrapped into a body object\n\n          var body;\n          var postBodyKeys = typeof postBody === 'object' ? Object.keys(postBody) : [];\n\n          if (postBodyKeys.length === 1) {\n            body = postBody[postBodyKeys.shift()];\n          } else {\n            body = postBody;\n          }\n\n          var filter = ''; // Separate filter object from url params and add to search query\n\n          if (urlParams.filter) {\n            if (LoopBackConfig.isHeadersFilteringSet()) {\n              headers.append('filter', JSON.stringify(urlParams.filter));\n            } else {\n              filter = \"?filter=\".concat(encodeURIComponent(JSON.stringify(urlParams.filter)));\n            }\n\n            delete urlParams.filter;\n          } // Separate where object from url params and add to search query\n\n          /**\n          CODE BELOW WILL GENERATE THE FOLLOWING ISSUES:\n          - https://github.com/mean-expert-official/loopback-sdk-builder/issues/356\n          - https://github.com/mean-expert-official/loopback-sdk-builder/issues/328\n          if (urlParams.where) {\n            headers.append('where', JSON.stringify(urlParams.where));\n            delete urlParams.where;\n          }\n          **/\n\n\n          if (typeof customHeaders === 'function') {\n            headers = customHeaders(headers);\n          }\n\n          this.searchParams.setJSON(urlParams);\n          var request = new Request(new RequestOptions({\n            headers: headers,\n            method: method,\n            url: \"\".concat(url).concat(filter),\n            search: Object.keys(urlParams).length > 0 ? this.searchParams.getURLSearchParams() : null,\n            body: body ? JSON.stringify(body) : undefined,\n            withCredentials: LoopBackConfig.getRequestOptionsCredentials()\n          }));\n          return this.http.request(request).map(function (res) {\n            return res.text() != \"\" ? res.json() : {};\n          }).catch(function (e) {\n            return _this.errorHandler.handleError(e);\n          });\n        }\n      }\n      /**\n       * @method authenticate\n       * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\n       * @license MIT\n       * @param {string} url Server URL\n       * @param {Headers} headers HTTP Headers\n       * @return {void}\n       * @description\n       * This method will try to authenticate using either an access_token or basic http auth\n       */\n\n    }, {\n      key: \"authenticate\",\n      value: function authenticate(url, headers) {\n        if (this.auth.getAccessTokenId()) {\n          headers.append('Authorization', LoopBackConfig.getAuthPrefix() + this.auth.getAccessTokenId());\n        }\n      }\n      /**\n       * @method create\n       * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\n       * @license MIT\n       * @param {T} data Generic data type\n       * @return {Observable<T>}\n       * @description\n       * Generic create method\n       */\n\n    }, {\n      key: \"create\",\n      value: function create(data, customHeaders) {\n        var _this2 = this;\n\n        return this.request('POST', [LoopBackConfig.getPath(), LoopBackConfig.getApiVersion(), this.model.getModelDefinition().path].join('/'), undefined, undefined, {\n          data: data\n        }, null, customHeaders).map(function (data) {\n          return _this2.model.factory(data);\n        });\n      }\n      /**\n       * @method createMany\n       * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\n       * @license MIT\n       * @param {T[]} data Generic data type array\n       * @return {Observable<T[]>}\n       * @description\n       * Generic create many method\n       */\n\n    }, {\n      key: \"createMany\",\n      value: function createMany(data, customHeaders) {\n        var _this3 = this;\n\n        return this.request('POST', [LoopBackConfig.getPath(), LoopBackConfig.getApiVersion(), this.model.getModelDefinition().path].join('/'), undefined, undefined, {\n          data: data\n        }, null, customHeaders).map(function (datum) {\n          return datum.map(function (data) {\n            return _this3.model.factory(data);\n          });\n        });\n      }\n      /**\n       * @method findById\n       * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\n       * @license MIT\n       * @param {any} data Generic data type\n       * @return {Observable<T>}\n       * @description\n       * Generic findById method\n       */\n\n    }, {\n      key: \"findById\",\n      value: function findById(id) {\n        var _this4 = this;\n\n        var filter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var customHeaders = arguments.length > 2 ? arguments[2] : undefined;\n        var _urlParams = {};\n        if (filter) _urlParams.filter = filter;\n        return this.request('GET', [LoopBackConfig.getPath(), LoopBackConfig.getApiVersion(), this.model.getModelDefinition().path, ':id'].join('/'), {\n          id: id\n        }, _urlParams, undefined, null, customHeaders).map(function (data) {\n          return _this4.model.factory(data);\n        });\n      }\n      /**\n       * @method find\n       * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\n       * @license MIT\n       * @return {Observable<T[+>}\n       * @description\n       * Generic find method\n       */\n\n    }, {\n      key: \"find\",\n      value: function find() {\n        var _this5 = this;\n\n        var filter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var customHeaders = arguments.length > 1 ? arguments[1] : undefined;\n        return this.request('GET', [LoopBackConfig.getPath(), LoopBackConfig.getApiVersion(), this.model.getModelDefinition().path].join('/'), undefined, {\n          filter: filter\n        }, undefined, null, customHeaders).map(function (datum) {\n          return datum.map(function (data) {\n            return _this5.model.factory(data);\n          });\n        });\n      }\n      /**\n       * @method exists\n       * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\n       * @license MIT\n       * @return {Observable<T[]>}\n       * @description\n       * Generic exists method\n       */\n\n    }, {\n      key: \"exists\",\n      value: function exists(id, customHeaders) {\n        return this.request('GET', [LoopBackConfig.getPath(), LoopBackConfig.getApiVersion(), this.model.getModelDefinition().path, ':id/exists'].join('/'), {\n          id: id\n        }, undefined, undefined, null, customHeaders);\n      }\n      /**\n       * @method findOne\n       * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\n       * @license MIT\n       * @return {Observable<T>}\n       * @description\n       * Generic findOne method\n       */\n\n    }, {\n      key: \"findOne\",\n      value: function findOne() {\n        var _this6 = this;\n\n        var filter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var customHeaders = arguments.length > 1 ? arguments[1] : undefined;\n        return this.request('GET', [LoopBackConfig.getPath(), LoopBackConfig.getApiVersion(), this.model.getModelDefinition().path, 'findOne'].join('/'), undefined, {\n          filter: filter\n        }, undefined, null, customHeaders).map(function (data) {\n          return _this6.model.factory(data);\n        });\n      }\n      /**\n       * @method updateAll\n       * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\n       * @license MIT\n       * @return {Observable<T[]>}\n       * @description\n       * Generic updateAll method\n       */\n\n    }, {\n      key: \"updateAll\",\n      value: function updateAll() {\n        var where = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var data = arguments.length > 1 ? arguments[1] : undefined;\n        var customHeaders = arguments.length > 2 ? arguments[2] : undefined;\n        var _urlParams = {};\n        if (where) _urlParams.where = where;\n        return this.request('POST', [LoopBackConfig.getPath(), LoopBackConfig.getApiVersion(), this.model.getModelDefinition().path, 'update'].join('/'), undefined, _urlParams, {\n          data: data\n        }, null, customHeaders);\n      }\n      /**\n       * @method deleteById\n       * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\n       * @license MIT\n       * @return {Observable<T>}\n       * @description\n       * Generic deleteById method\n       */\n\n    }, {\n      key: \"deleteById\",\n      value: function deleteById(id, customHeaders) {\n        var _this7 = this;\n\n        return this.request('DELETE', [LoopBackConfig.getPath(), LoopBackConfig.getApiVersion(), this.model.getModelDefinition().path, ':id'].join('/'), {\n          id: id\n        }, undefined, undefined, null, customHeaders).map(function (data) {\n          return _this7.model.factory(data);\n        });\n      }\n      /**\n       * @method count\n       * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\n       * @license MIT\n       * @return {Observable<{ count: number }>}\n       * @description\n       * Generic count method\n       */\n\n    }, {\n      key: \"count\",\n      value: function count() {\n        var where = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var customHeaders = arguments.length > 1 ? arguments[1] : undefined;\n        var _urlParams = {};\n        if (where) _urlParams.where = where;\n        return this.request('GET', [LoopBackConfig.getPath(), LoopBackConfig.getApiVersion(), this.model.getModelDefinition().path, 'count'].join('/'), undefined, _urlParams, undefined, null, customHeaders);\n      }\n      /**\n       * @method updateAttributes\n       * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\n       * @license MIT\n       * @return {Observable<T>}\n       * @description\n       * Generic updateAttributes method\n       */\n\n    }, {\n      key: \"updateAttributes\",\n      value: function updateAttributes(id, data, customHeaders) {\n        var _this8 = this;\n\n        return this.request('PUT', [LoopBackConfig.getPath(), LoopBackConfig.getApiVersion(), this.model.getModelDefinition().path, ':id'].join('/'), {\n          id: id\n        }, undefined, {\n          data: data\n        }, null, customHeaders).map(function (data) {\n          return _this8.model.factory(data);\n        });\n      }\n      /**\n       * @method upsert\n       * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\n       * @license MIT\n       * @return {Observable<T>}\n       * @description\n       * Generic upsert method\n       */\n\n    }, {\n      key: \"upsert\",\n      value: function upsert() {\n        var _this9 = this;\n\n        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var customHeaders = arguments.length > 1 ? arguments[1] : undefined;\n        return this.request('PUT', [LoopBackConfig.getPath(), LoopBackConfig.getApiVersion(), this.model.getModelDefinition().path].join('/'), undefined, undefined, {\n          data: data\n        }, null, customHeaders).map(function (data) {\n          return _this9.model.factory(data);\n        });\n      }\n      /**\n       * @method upsertPatch\n       * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\n       * @license MIT\n       * @return {Observable<T>}\n       * @description\n       * Generic upsert method using patch http method\n       */\n\n    }, {\n      key: \"upsertPatch\",\n      value: function upsertPatch() {\n        var _this10 = this;\n\n        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var customHeaders = arguments.length > 1 ? arguments[1] : undefined;\n        return this.request('PATCH', [LoopBackConfig.getPath(), LoopBackConfig.getApiVersion(), this.model.getModelDefinition().path].join('/'), undefined, undefined, {\n          data: data\n        }, null, customHeaders).map(function (data) {\n          return _this10.model.factory(data);\n        });\n      }\n      /**\n       * @method upsertWithWhere\n       * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\n       * @license MIT\n       * @return {Observable<T>}\n       * @description\n       * Generic upsertWithWhere method\n       */\n\n    }, {\n      key: \"upsertWithWhere\",\n      value: function upsertWithWhere() {\n        var _this11 = this;\n\n        var where = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var customHeaders = arguments.length > 2 ? arguments[2] : undefined;\n        var _urlParams = {};\n        if (where) _urlParams.where = where;\n        return this.request('POST', [LoopBackConfig.getPath(), LoopBackConfig.getApiVersion(), this.model.getModelDefinition().path, 'upsertWithWhere'].join('/'), undefined, _urlParams, {\n          data: data\n        }, null, customHeaders).map(function (data) {\n          return _this11.model.factory(data);\n        });\n      }\n      /**\n       * @method replaceOrCreate\n       * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\n       * @license MIT\n       * @return {Observable<T>}\n       * @description\n       * Generic replaceOrCreate method\n       */\n\n    }, {\n      key: \"replaceOrCreate\",\n      value: function replaceOrCreate() {\n        var _this12 = this;\n\n        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var customHeaders = arguments.length > 1 ? arguments[1] : undefined;\n        return this.request('POST', [LoopBackConfig.getPath(), LoopBackConfig.getApiVersion(), this.model.getModelDefinition().path, 'replaceOrCreate'].join('/'), undefined, undefined, {\n          data: data\n        }, null, customHeaders).map(function (data) {\n          return _this12.model.factory(data);\n        });\n      }\n      /**\n       * @method replaceById\n       * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\n       * @license MIT\n       * @return {Observable<T>}\n       * @description\n       * Generic replaceById method\n       */\n\n    }, {\n      key: \"replaceById\",\n      value: function replaceById(id) {\n        var _this13 = this;\n\n        var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var customHeaders = arguments.length > 2 ? arguments[2] : undefined;\n        return this.request('POST', [LoopBackConfig.getPath(), LoopBackConfig.getApiVersion(), this.model.getModelDefinition().path, ':id', 'replace'].join('/'), {\n          id: id\n        }, undefined, {\n          data: data\n        }, null, customHeaders).map(function (data) {\n          return _this13.model.factory(data);\n        });\n      }\n      /**\n       * @method createChangeStream\n       * @author Jonathan Casarrubias <t: johncasarrubias, gh: mean-expert-official>\n       * @license MIT\n       * @return {Observable<any>}\n       * @description\n       * Generic createChangeStream method\n       */\n\n    }, {\n      key: \"createChangeStream\",\n      value: function createChangeStream() {\n        var subject = new Subject();\n\n        if (typeof EventSource !== 'undefined') {\n          var emit = function emit(msg) {\n            return subject.next(JSON.parse(msg.data));\n          };\n\n          var source = new EventSource([LoopBackConfig.getPath(), LoopBackConfig.getApiVersion(), this.model.getModelDefinition().path, 'change-stream'].join('/'));\n          source.addEventListener('data', emit);\n          source.onerror = emit;\n        } else {\n          console.warn('SDK Builder: EventSource is not supported');\n        }\n\n        return subject.asObservable();\n      }\n    }]);\n\n    return BaseLoopBackApi;\n  }();\n\n  BaseLoopBackApi.ɵfac = function BaseLoopBackApi_Factory(t) {\n    return new (t || BaseLoopBackApi)(i0.ɵɵinject(Http), i0.ɵɵinject(SDKModels), i0.ɵɵinject(LoopBackAuth), i0.ɵɵinject(JSONSearchParams), i0.ɵɵinject(ErrorHandler, 8));\n  };\n\n  BaseLoopBackApi.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BaseLoopBackApi,\n    factory: BaseLoopBackApi.ɵfac\n  });\n  return BaseLoopBackApi;\n})();","map":null,"metadata":{},"sourceType":"module"}