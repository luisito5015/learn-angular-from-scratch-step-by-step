{"ast":null,"code":"import _createClass from \"/Users/luiscotto/Documents/Projects/CS-470/practice/lafs-web/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/luiscotto/Documents/Projects/CS-470/practice/lafs-web/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NgModule, Injectable, NgZone, defineInjectable, inject } from '@angular/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { asapScheduler, combineLatest, fromEventPattern, Subject } from 'rxjs';\nimport { debounceTime, map, startWith, takeUntil } from 'rxjs/operators';\nimport { coerceArray } from '@angular/cdk/coercion';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nvar LayoutModule = /*#__PURE__*/(function () {\n  var LayoutModule = /*#__PURE__*/_createClass(function LayoutModule() {\n    _classCallCheck(this, LayoutModule);\n  });\n\n  LayoutModule.ɵfac = function LayoutModule_Factory(t) {\n    return new (t || LayoutModule)();\n  };\n\n  LayoutModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: LayoutModule\n  });\n  LayoutModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return LayoutModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Global registry for all dynamically-created, injected media queries.\n * @type {?}\n */\n\n\nvar mediaQueriesForWebkitCompatibility = /*#__PURE__*/new Set();\n/**\n * Style tag that holds all of the dynamically-created media queries.\n * @type {?}\n */\n\nvar mediaQueryStyleNode;\n/**\n * A utility for calling matchMedia queries.\n */\n\nvar MediaMatcher = /*#__PURE__*/function () {\n  /**\n   * @param {?} platform\n   */\n  function MediaMatcher(platform) {\n    _classCallCheck(this, MediaMatcher);\n\n    this.platform = platform;\n    this._matchMedia = this.platform.isBrowser && window.matchMedia ? // matchMedia is bound to the window scope intentionally as it is an illegal invocation to\n    // call it from a different scope.\n    window.matchMedia.bind(window) : noopMatchMedia;\n  }\n  /**\n   * Evaluates the given media query and returns the native MediaQueryList from which results\n   * can be retrieved.\n   * Confirms the layout engine will trigger for the selector query provided and returns the\n   * MediaQueryList for the query provided.\n   * @param {?} query\n   * @return {?}\n   */\n\n\n  _createClass(MediaMatcher, [{\n    key: \"matchMedia\",\n    value: function matchMedia(query) {\n      if (this.platform.WEBKIT) {\n        createEmptyStyleRule(query);\n      }\n\n      return this._matchMedia(query);\n    }\n  }]);\n\n  return MediaMatcher;\n}();\n\nMediaMatcher.ɵfac = function MediaMatcher_Factory(t) {\n  return new (t || MediaMatcher)(ɵngcc0.ɵɵinject(ɵngcc1.Platform));\n};\n\nMediaMatcher.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: MediaMatcher,\n  factory: MediaMatcher.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\n/** @nocollapse */\nMediaMatcher.ngInjectableDef = /*#__PURE__*/defineInjectable({\n  factory: function MediaMatcher_Factory() {\n    return new MediaMatcher(inject(Platform));\n  },\n  token: MediaMatcher,\n  providedIn: \"root\"\n});\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * For Webkit engines that only trigger the MediaQueryListListener when\n * there is at least one CSS selector for the respective media query.\n * @param {?} query\n * @return {?}\n */\n\n\nfunction createEmptyStyleRule(query) {\n  if (mediaQueriesForWebkitCompatibility.has(query)) {\n    return;\n  }\n\n  try {\n    if (!mediaQueryStyleNode) {\n      mediaQueryStyleNode = document.createElement('style');\n      mediaQueryStyleNode.setAttribute('type', 'text/css');\n\n      /** @type {?} */\n      document.head.appendChild(mediaQueryStyleNode);\n    }\n\n    if (mediaQueryStyleNode.sheet) {\n      /** @type {?} */\n      mediaQueryStyleNode.sheet.insertRule(\"@media \".concat(query, \" {.fx-query-test{ }}\"), 0);\n      mediaQueriesForWebkitCompatibility.add(query);\n    }\n  } catch (e) {\n    console.error(e);\n  }\n}\n/**\n * No-op matchMedia replacement for non-browser platforms.\n * @param {?} query\n * @return {?}\n */\n\n\nfunction noopMatchMedia(query) {\n  // Use `as any` here to avoid adding additional necessary properties for\n  // the noop matcher.\n  return (\n    /** @type {?} */\n    {\n      matches: query === 'all' || query === '',\n      media: query,\n      addListener: function addListener() {},\n      removeListener: function removeListener() {}\n    }\n  );\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Utility for checking the matching state of \\@media queries.\n */\n\n\nvar BreakpointObserver = /*#__PURE__*/function () {\n  /**\n   * @param {?} mediaMatcher\n   * @param {?} zone\n   */\n  function BreakpointObserver(mediaMatcher, zone) {\n    _classCallCheck(this, BreakpointObserver);\n\n    this.mediaMatcher = mediaMatcher;\n    this.zone = zone;\n    /**\n     * A map of all media queries currently being listened for.\n     */\n\n    this._queries = new Map();\n    /**\n     * A subject for all other observables to takeUntil based on.\n     */\n\n    this._destroySubject = new Subject();\n  }\n  /**\n   * Completes the active subject, signalling to all other observables to complete.\n   * @return {?}\n   */\n\n\n  _createClass(BreakpointObserver, [{\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._destroySubject.next();\n\n      this._destroySubject.complete();\n    }\n    /**\n     * Whether one or more media queries match the current viewport size.\n     * @param {?} value One or more media queries to check.\n     * @return {?} Whether any of the media queries match.\n     */\n\n  }, {\n    key: \"isMatched\",\n    value: function isMatched(value) {\n      var _this = this;\n\n      /** @type {?} */\n      var queries = splitQueries(coerceArray(value));\n      return queries.some(function (mediaQuery) {\n        return _this._registerQuery(mediaQuery).mql.matches;\n      });\n    }\n    /**\n     * Gets an observable of results for the given queries that will emit new results for any changes\n     * in matching of the given queries.\n     * @param {?} value One or more media queries to check.\n     * @return {?} A stream of matches for the given queries.\n     */\n\n  }, {\n    key: \"observe\",\n    value: function observe(value) {\n      var _this2 = this;\n\n      /** @type {?} */\n      var queries = splitQueries(coerceArray(value));\n      /** @type {?} */\n\n      var observables = queries.map(function (query) {\n        return _this2._registerQuery(query).observable;\n      });\n      return combineLatest(observables).pipe(debounceTime(0, asapScheduler), map(function (breakpointStates) {\n        /** @type {?} */\n        var response = {\n          matches: false,\n          breakpoints: {}\n        };\n        breakpointStates.forEach(function (state) {\n          response.matches = response.matches || state.matches;\n          response.breakpoints[state.query] = state.matches;\n        });\n        return response;\n      }));\n    }\n    /**\n     * Registers a specific query to be listened for.\n     * @private\n     * @param {?} query\n     * @return {?}\n     */\n\n  }, {\n    key: \"_registerQuery\",\n    value: function _registerQuery(query) {\n      var _this3 = this;\n\n      // Only set up a new MediaQueryList if it is not already being listened for.\n      if (this._queries.has(query)) {\n        return (\n          /** @type {?} */\n          this._queries.get(query)\n        );\n      }\n      /** @type {?} */\n\n\n      var mql = this.mediaMatcher.matchMedia(query); // TODO(jelbourn): change this `any` to `MediaQueryListEvent` once Google has upgraded to\n      // TypeScript 3.1 (the type is unavailable before then).\n\n      /** @type {?} */\n\n      var queryListener; // Create callback for match changes and add it is as a listener.\n\n      /** @type {?} */\n\n      var queryObservable = fromEventPattern( // Listener callback methods are wrapped to be placed back in ngZone. Callbacks must be placed\n      // back into the zone because matchMedia is only included in Zone.js by loading the\n      // webapis-media-query.js file alongside the zone.js file.  Additionally, some browsers do not\n      // have MediaQueryList inherit from EventTarget, which causes inconsistencies in how Zone.js\n      // patches it.\n      function (listener) {\n        queryListener = function queryListener(e) {\n          return _this3.zone.run(function () {\n            return listener(e);\n          });\n        };\n\n        mql.addListener(queryListener);\n      }, function () {\n        return mql.removeListener(queryListener);\n      }).pipe(startWith(mql), map(function (nextMql) {\n        return {\n          query: query,\n          matches: nextMql.matches\n        };\n      }), takeUntil(this._destroySubject)); // Add the MediaQueryList to the set of queries.\n\n      /** @type {?} */\n\n      var output = {\n        observable: queryObservable,\n        mql: mql\n      };\n\n      this._queries.set(query, output);\n\n      return output;\n    }\n  }]);\n\n  return BreakpointObserver;\n}();\n\nBreakpointObserver.ɵfac = function BreakpointObserver_Factory(t) {\n  return new (t || BreakpointObserver)(ɵngcc0.ɵɵinject(MediaMatcher), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n};\n\nBreakpointObserver.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: BreakpointObserver,\n  factory: BreakpointObserver.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\n/** @nocollapse */\nBreakpointObserver.ngInjectableDef = /*#__PURE__*/defineInjectable({\n  factory: function BreakpointObserver_Factory() {\n    return new BreakpointObserver(inject(MediaMatcher), inject(NgZone));\n  },\n  token: BreakpointObserver,\n  providedIn: \"root\"\n});\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n * @param {?} queries\n * @return {?}\n */\n\n\nfunction splitQueries(queries) {\n  return queries.map(function (query) {\n    return query.split(',');\n  }).reduce(function (a1, a2) {\n    return a1.concat(a2);\n  }).map(function (query) {\n    return query.trim();\n  });\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// PascalCase is being used as Breakpoints is used like an enum.\n// tslint:disable-next-line:variable-name\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @type {?}\n */\n\n\nvar Breakpoints = {\n  XSmall: '(max-width: 599.99px)',\n  Small: '(min-width: 600px) and (max-width: 959.99px)',\n  Medium: '(min-width: 960px) and (max-width: 1279.99px)',\n  Large: '(min-width: 1280px) and (max-width: 1919.99px)',\n  XLarge: '(min-width: 1920px)',\n  Handset: '(max-width: 599.99px) and (orientation: portrait), ' + '(max-width: 959.99px) and (orientation: landscape)',\n  Tablet: '(min-width: 600px) and (max-width: 839.99px) and (orientation: portrait), ' + '(min-width: 960px) and (max-width: 1279.99px) and (orientation: landscape)',\n  Web: '(min-width: 840px) and (orientation: portrait), ' + '(min-width: 1280px) and (orientation: landscape)',\n  HandsetPortrait: '(max-width: 599.99px) and (orientation: portrait)',\n  TabletPortrait: '(min-width: 600px) and (max-width: 839.99px) and (orientation: portrait)',\n  WebPortrait: '(min-width: 840px) and (orientation: portrait)',\n  HandsetLandscape: '(max-width: 959.99px) and (orientation: landscape)',\n  TabletLandscape: '(min-width: 960px) and (max-width: 1279.99px) and (orientation: landscape)',\n  WebLandscape: '(min-width: 1280px) and (orientation: landscape)'\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { LayoutModule, BreakpointObserver, Breakpoints, MediaMatcher }; //# sourceMappingURL=layout.js.map","map":null,"metadata":{},"sourceType":"module"}