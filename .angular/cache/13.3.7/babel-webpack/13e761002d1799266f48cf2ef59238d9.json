{"ast":null,"code":"import _classCallCheck from \"/Users/luiscotto/Documents/Projects/CS-470/practice/lafs-web/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/luiscotto/Documents/Projects/CS-470/practice/lafs-web/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Observable } from 'rxjs/Observable'; //import { ErrorObservable } from 'rxjs/observable/ErrorObservable';\n\nimport 'rxjs/add/observable/throw';\nimport * as i0 from \"@angular/core\";\n/**\n * Default error handler\n */\n\nexport var ErrorHandler = /*#__PURE__*/(function () {\n  var ErrorHandler = /*#__PURE__*/function () {\n    function ErrorHandler() {\n      _classCallCheck(this, ErrorHandler);\n    }\n\n    _createClass(ErrorHandler, [{\n      key: \"handleError\",\n      value: // ErrorObservable when rxjs version < rc.5\n      // ErrorObservable<string> when rxjs version = rc.5\n      // I'm leaving any for now to avoid breaking apps using both versions\n      function handleError(error) {\n        return Observable.throw(error.json().error || 'Server error');\n      }\n    }]);\n\n    return ErrorHandler;\n  }();\n\n  ErrorHandler.ɵfac = function ErrorHandler_Factory(t) {\n    return new (t || ErrorHandler)();\n  };\n\n  ErrorHandler.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErrorHandler,\n    factory: ErrorHandler.ɵfac\n  });\n  return ErrorHandler;\n})();","map":null,"metadata":{},"sourceType":"module"}